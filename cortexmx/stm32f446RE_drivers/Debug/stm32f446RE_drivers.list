
stm32f446RE_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800244c  0800244c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800244c  0800244c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800244c  0800244c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800244c  0800244c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  080024cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080024cc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f8e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ed4  00000000  00000000  00025030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c0  00000000  00000000  00025f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  000262c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00002f7d  00000000  00000000  00026600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000012db  00000000  00000000  0002957d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0002a858  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000149c  00000000  00000000  0002a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002348 	.word	0x08002348

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08002348 	.word	0x08002348

08000204 <init_systick_timer>:

/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz) {
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <init_systick_timer+0x5c>)
 800020e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <init_systick_timer+0x60>)
 8000212:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000214:	4a14      	ldr	r2, [pc, #80]	; (8000268 <init_systick_timer+0x64>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	fbb2 f3f3 	udiv	r3, r2, r3
 800021c:	3b01      	subs	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	431a      	orrs	r2, r3
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= (1 << 1);  //Enables SysTick exception request:
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 0202 	orr.w	r2, r3, #2
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1 << 2);  //Indicates the clock source, processor clock source
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0204 	orr.w	r2, r3, #4
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= (1 << 0); //enables the counter
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 0201 	orr.w	r2, r3, #1
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	601a      	str	r2, [r3, #0]

}
 8000256:	bf00      	nop
 8000258:	371c      	adds	r7, #28
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000e014 	.word	0xe000e014
 8000264:	e000e010 	.word	0xe000e010
 8000268:	00f42400 	.word	0x00f42400

0800026c <get_day_of_week>:

char* get_day_of_week(uint8_t i) {
 800026c:	b4b0      	push	{r4, r5, r7}
 800026e:	b08b      	sub	sp, #44	; 0x2c
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

	char* days[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <get_day_of_week+0x38>)
 8000278:	f107 040c 	add.w	r4, r7, #12
 800027c:	461d      	mov	r5, r3
 800027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000286:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i - 1];
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	3b01      	subs	r3, #1
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000294:	4413      	add	r3, r2
 8000296:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800029a:	4618      	mov	r0, r3
 800029c:	372c      	adds	r7, #44	; 0x2c
 800029e:	46bd      	mov	sp, r7
 80002a0:	bcb0      	pop	{r4, r5, r7}
 80002a2:	4770      	bx	lr
 80002a4:	080023a4 	.word	0x080023a4

080002a8 <number_to_string>:

void number_to_string(uint8_t num , char* buf) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	d809      	bhi.n	80002ce <number_to_string+0x26>
		buf[0] = '0';
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2230      	movs	r2, #48	; 0x30
 80002be:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	3301      	adds	r3, #1
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	3230      	adds	r2, #48	; 0x30
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	701a      	strb	r2, [r3, #0]

	} else if(num >= 10 && num < 99) {
		buf[0] = (num / 10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80002cc:	e01f      	b.n	800030e <number_to_string+0x66>
	} else if(num >= 10 && num < 99) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	d91c      	bls.n	800030e <number_to_string+0x66>
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b62      	cmp	r3, #98	; 0x62
 80002d8:	d819      	bhi.n	800030e <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <number_to_string+0x70>)
 80002de:	fba2 2303 	umull	r2, r3, r2, r3
 80002e2:	08db      	lsrs	r3, r3, #3
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	3330      	adds	r3, #48	; 0x30
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <number_to_string+0x70>)
 80002f2:	fba3 1302 	umull	r1, r3, r3, r2
 80002f6:	08d9      	lsrs	r1, r3, #3
 80002f8:	460b      	mov	r3, r1
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	440b      	add	r3, r1
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	b2da      	uxtb	r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	3230      	adds	r2, #48	; 0x30
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	701a      	strb	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	cccccccd 	.word	0xcccccccd

0800031c <time_to_string>:

//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	static char buf[9];

	buf[2]= ':';
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <time_to_string+0x48>)
 8000326:	223a      	movs	r2, #58	; 0x3a
 8000328:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <time_to_string+0x48>)
 800032c:	223a      	movs	r2, #58	; 0x3a
 800032e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	789b      	ldrb	r3, [r3, #2]
 8000334:	490b      	ldr	r1, [pc, #44]	; (8000364 <time_to_string+0x48>)
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffb6 	bl	80002a8 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <time_to_string+0x4c>)
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffb0 	bl	80002a8 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <time_to_string+0x50>)
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffaa 	bl	80002a8 <number_to_string>

	buf[8] = '\0';
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <time_to_string+0x48>)
 8000356:	2200      	movs	r2, #0
 8000358:	721a      	strb	r2, [r3, #8]

	return buf;
 800035a:	4b02      	ldr	r3, [pc, #8]	; (8000364 <time_to_string+0x48>)
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000094 	.word	0x20000094
 8000368:	20000097 	.word	0x20000097
 800036c:	2000009a 	.word	0x2000009a

08000370 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

	static char buf[9];

	buf[2]= '/';
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <date_to_string+0x48>)
 800037a:	222f      	movs	r2, #47	; 0x2f
 800037c:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <date_to_string+0x48>)
 8000380:	222f      	movs	r2, #47	; 0x2f
 8000382:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	490b      	ldr	r1, [pc, #44]	; (80003b8 <date_to_string+0x48>)
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff8c 	bl	80002a8 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	785b      	ldrb	r3, [r3, #1]
 8000394:	4909      	ldr	r1, [pc, #36]	; (80003bc <date_to_string+0x4c>)
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff86 	bl	80002a8 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	789b      	ldrb	r3, [r3, #2]
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <date_to_string+0x50>)
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff80 	bl	80002a8 <number_to_string>

	buf[8]= '\0';
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <date_to_string+0x48>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	721a      	strb	r2, [r3, #8]

	return buf;
 80003ae:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <date_to_string+0x48>)

}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200000a0 	.word	0x200000a0
 80003bc:	200000a3 	.word	0x200000a3
 80003c0:	200000a6 	.word	0x200000a6

080003c4 <mdelay>:

static void mdelay(uint32_t cnt) {
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0; i < (cnt * 1000); i++);
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	e002      	b.n	80003d8 <mdelay+0x14>
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3301      	adds	r3, #1
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d3f4      	bcc.n	80003d2 <mdelay+0xe>
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <main>:

int main(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
	RTC_date_t current_date;

#ifndef PRINT_LCD
	printf("RTC test\n");
#else
	lcd_init();
 80003fa:	f000 fc47 	bl	8000c8c <lcd_init>

	lcd_print_string("RTC Test...");
 80003fe:	4833      	ldr	r0, [pc, #204]	; (80004cc <main+0xd8>)
 8000400:	f000 fc30 	bl	8000c64 <lcd_print_string>


	mdelay(2000);
 8000404:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000408:	f7ff ffdc 	bl	80003c4 <mdelay>

	lcd_display_clear();
 800040c:	f000 fcc8 	bl	8000da0 <lcd_display_clear>
	lcd_display_return_home();
 8000410:	f000 fcd0 	bl	8000db4 <lcd_display_return_home>
#endif

	if(ds1307_init()) {
 8000414:	f000 fa54 	bl	80008c0 <ds1307_init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <main+0x32>
		printf("RTC init has failed\n");
 800041e:	482c      	ldr	r0, [pc, #176]	; (80004d0 <main+0xdc>)
 8000420:	f001 fb3c 	bl	8001a9c <puts>
		while(1);
 8000424:	e7fe      	b.n	8000424 <main+0x30>
	}

	init_systick_timer(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff feec 	bl	8000204 <init_systick_timer>

	current_date.day = FRIDAY;
 800042c:	2306      	movs	r3, #6
 800042e:	71fb      	strb	r3, [r7, #7]
	current_date.date = 15;
 8000430:	230f      	movs	r3, #15
 8000432:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8000434:	2301      	movs	r3, #1
 8000436:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8000438:	2315      	movs	r3, #21
 800043a:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 11;
 800043c:	230b      	movs	r3, #11
 800043e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000440:	233b      	movs	r3, #59	; 0x3b
 8000442:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8000444:	231e      	movs	r3, #30
 8000446:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000448:	2301      	movs	r3, #1
 800044a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fa9d 	bl	800098e <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fa4f 	bl	80008fc <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fb0d 	bl	8000a80 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fabf 	bl	80009ee <ds1307_get_current_time>

	char *am_pm;

	if(current_time.time_format != TIME_FORMAT_24HRS) {
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d013      	beq.n	800049e <main+0xaa>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000476:	7afb      	ldrb	r3, [r7, #11]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <main+0x8c>
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <main+0xe0>)
 800047e:	e000      	b.n	8000482 <main+0x8e>
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <main+0xe4>)
 8000482:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n", time_to_string(&current_time), am_pm); // 11:59:30 PM
#else
		lcd_print_string(time_to_string(&current_time));
 8000484:	f107 0308 	add.w	r3, r7, #8
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff47 	bl	800031c <time_to_string>
 800048e:	4603      	mov	r3, r0
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fbe7 	bl	8000c64 <lcd_print_string>
		lcd_print_string(am_pm);
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f000 fbe4 	bl	8000c64 <lcd_print_string>
 800049c:	e008      	b.n	80004b0 <main+0xbc>
#endif
	} else {
#ifndef PRINT_LCD
		printf("Current time = %s\n", time_to_string(&current_time)); // 11:59:30
#else
		lcd_print_string(time_to_string(&current_time));
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff3a 	bl	800031c <time_to_string>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fbda 	bl	8000c64 <lcd_print_string>

#ifndef PRINT_LCD
	// 15/01/21 <Friday>
	printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 80004b0:	2101      	movs	r1, #1
 80004b2:	2002      	movs	r0, #2
 80004b4:	f000 fc88 	bl	8000dc8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff58 	bl	8000370 <date_to_string>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 fbce 	bl	8000c64 <lcd_print_string>
#endif

	while(1);
 80004c8:	e7fe      	b.n	80004c8 <main+0xd4>
 80004ca:	bf00      	nop
 80004cc:	080023c0 	.word	0x080023c0
 80004d0:	080023cc 	.word	0x080023cc
 80004d4:	080023e0 	.word	0x080023e0
 80004d8:	080023e4 	.word	0x080023e4

080004dc <SysTick_Handler>:

	return 0;
}


void SysTick_Handler(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fa81 	bl	80009ee <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS) {
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d017      	beq.n	8000522 <SysTick_Handler+0x46>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SysTick_Handler+0x20>
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <SysTick_Handler+0xa4>)
 80004fa:	e000      	b.n	80004fe <SysTick_Handler+0x22>
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <SysTick_Handler+0xa8>)
 80004fe:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n", time_to_string(&current_time), am_pm); // 04:25:41 PM
#else
		lcd_set_cursor(1, 1);
 8000500:	2101      	movs	r1, #1
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fc60 	bl	8000dc8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff05 	bl	800031c <time_to_string>
 8000512:	4603      	mov	r3, r0
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fba5 	bl	8000c64 <lcd_print_string>
		lcd_print_string(am_pm);
 800051a:	68f8      	ldr	r0, [r7, #12]
 800051c:	f000 fba2 	bl	8000c64 <lcd_print_string>
 8000520:	e00c      	b.n	800053c <SysTick_Handler+0x60>

	} else {
#ifndef PRINT_LCD
		printf("Current time = %s\n", time_to_string(&current_time)); // 04:25:41
#else
		lcd_set_cursor(1, 1);
 8000522:	2101      	movs	r1, #1
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fc4f 	bl	8000dc8 <lcd_set_cursor>
		lcd_print_string(time_to_string(&current_time));
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fef4 	bl	800031c <time_to_string>
 8000534:	4603      	mov	r3, r0
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb94 	bl	8000c64 <lcd_print_string>
#endif
	}

	ds1307_get_current_date(&current_date);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fa9e 	bl	8000a80 <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_set_cursor(2, 1);
 8000544:	2101      	movs	r1, #1
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fc3e 	bl	8000dc8 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff0e 	bl	8000370 <date_to_string>
 8000554:	4603      	mov	r3, r0
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fb84 	bl	8000c64 <lcd_print_string>
	lcd_print_char('<');
 800055c:	203c      	movs	r0, #60	; 0x3c
 800055e:	f000 fb5f 	bl	8000c20 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe81 	bl	800026c <get_day_of_week>
 800056a:	4603      	mov	r3, r0
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fb79 	bl	8000c64 <lcd_print_string>
	lcd_print_char('>');
 8000572:	203e      	movs	r0, #62	; 0x3e
 8000574:	f000 fb54 	bl	8000c20 <lcd_print_char>
#endif

}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	080023e0 	.word	0x080023e0
 8000584:	080023e4 	.word	0x080023e4

08000588 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e00a      	b.n	80005b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800059a:	f3af 8000 	nop.w
 800059e:	4601      	mov	r1, r0
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf0      	blt.n	800059a <_read+0x12>
	}

return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
		//ITM_SendChar(*ptr++);
	}
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_close>:

int _close(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000620:	605a      	str	r2, [r3, #4]
	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <_isatty>:

int _isatty(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000642:	b480      	push	{r7}
 8000644:	b085      	sub	sp, #20
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
	return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f001 f966 	bl	800195c <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20020000 	.word	0x20020000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	200000f0 	.word	0x200000f0

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f001 f937 	bl	8001968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fe7b 	bl	80003f4 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800070c:	08002454 	.word	0x08002454
  ldr r2, =_sbss
 8000710:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000714:	200000f0 	.word	0x200000f0

08000718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <ds1307_i2c_pin_config>:
static uint8_t bcd_to_binary(uint8_t value);
static uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2CHandle;

static void ds1307_i2c_pin_config(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	220c      	movs	r2, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f940 	bl	80019b0 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000730:	463b      	mov	r3, r7
 8000732:	220c      	movs	r2, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f93a 	bl	80019b0 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <ds1307_i2c_pin_config+0x74>)
 800073e:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000744:	2302      	movs	r3, #2
 8000746:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000748:	2307      	movs	r3, #7
 800074a:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800074c:	2301      	movs	r3, #1
 800074e:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000750:	2300      	movs	r3, #0
 8000752:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000754:	2302      	movs	r3, #2
 8000756:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fc2b 	bl	8000fb8 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <ds1307_i2c_pin_config+0x74>)
 8000764:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800076a:	2302      	movs	r3, #2
 800076c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800076e:	2306      	movs	r3, #6
 8000770:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000772:	2301      	movs	r3, #1
 8000774:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800077a:	2302      	movs	r3, #2
 800077c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 800077e:	463b      	mov	r3, r7
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fc19 	bl	8000fb8 <GPIO_Init>
}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020400 	.word	0x40020400

08000794 <ds1307_i2c_config>:

static void ds1307_i2c_config(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <ds1307_i2c_config+0x20>)
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <ds1307_i2c_config+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <ds1307_i2c_config+0x20>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	725a      	strb	r2, [r3, #9]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <ds1307_i2c_config+0x20>)
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <ds1307_i2c_config+0x28>)
 80007a8:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2CHandle);
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <ds1307_i2c_config+0x20>)
 80007ac:	f000 fe76 	bl	800149c <I2C_Init>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000b8 	.word	0x200000b8
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <ds1307_write>:


static void ds1307_write(uint8_t value, uint8_t reg_addr) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]

	uint8_t tx[2];
	tx[0] = reg_addr;
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80007d8:	f107 010c 	add.w	r1, r7, #12
 80007dc:	2300      	movs	r3, #0
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2368      	movs	r3, #104	; 0x68
 80007e2:	2202      	movs	r2, #2
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <ds1307_write+0x34>)
 80007e6:	f000 ff0b 	bl	8001600 <I2C_MasterSendData>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000b8 	.word	0x200000b8

080007f8 <ds1307_read>:



static uint8_t ds1307_read(uint8_t reg_addr) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2CHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000802:	1df9      	adds	r1, r7, #7
 8000804:	2300      	movs	r3, #0
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2368      	movs	r3, #104	; 0x68
 800080a:	2201      	movs	r2, #1
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <ds1307_read+0x38>)
 800080e:	f000 fef7 	bl	8001600 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000812:	f107 010f 	add.w	r1, r7, #15
 8000816:	2300      	movs	r3, #0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2368      	movs	r3, #104	; 0x68
 800081c:	2201      	movs	r2, #1
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <ds1307_read+0x38>)
 8000820:	f000 ff51 	bl	80016c6 <I2C_MasterReceiveData>

    return data;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000b8 	.word	0x200000b8

08000834 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value) {
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]

	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	73fb      	strb	r3, [r7, #15]
	if(value >= 10) {
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d918      	bls.n	800087a <binary_to_bcd+0x46>
		m = (value / 10);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <binary_to_bcd+0x54>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	73bb      	strb	r3, [r7, #14]
		n = (value % 10);
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <binary_to_bcd+0x54>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	08d9      	lsrs	r1, r3, #3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	737b      	strb	r3, [r7, #13]
		bcd = ((m << 4) | n);
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	b25a      	sxtb	r2, r3
 8000870:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	cccccccd 	.word	0xcccccccd

0800088c <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value) {
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]

	uint8_t m, n;

	m = (uint8_t) ((value >> 4) * 10);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	091b      	lsrs	r3, r3, #4
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
	n = (value & (uint8_t)0x0F);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	73bb      	strb	r3, [r7, #14]
	return (m + n);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	4413      	add	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <ds1307_init>:


//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds1307_init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

	//1. Initialize the I2C pins
	ds1307_i2c_pin_config();
 80008c6:	f7ff ff29 	bl	800071c <ds1307_i2c_pin_config>

	//2. Initialize the I2C peripheral
	ds1307_i2c_config();
 80008ca:	f7ff ff63 	bl	8000794 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80008ce:	2101      	movs	r1, #1
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <ds1307_init+0x38>)
 80008d2:	f000 ff8a 	bl	80017ea <I2C_PeripheralControl>

	//4. Make clock halt = 0
	ds1307_write(0x00, DS1307_ADDR_SEC);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff71 	bl	80007c0 <ds1307_write>

	//5. Read clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff ff8a 	bl	80007f8 <ds1307_read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	09db      	lsrs	r3, r3, #7
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40005400 	.word	0x40005400

080008fc <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;

	seconds = binary_to_bcd(rtc_time->seconds);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff93 	bl	8000834 <binary_to_bcd>
 800090e:	4603      	mov	r3, r0
 8000910:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000918:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff4e 	bl	80007c0 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff83 	bl	8000834 <binary_to_bcd>
 800092e:	4603      	mov	r3, r0
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff44 	bl	80007c0 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff79 	bl	8000834 <binary_to_bcd>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	78db      	ldrb	r3, [r3, #3]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d104      	bne.n	8000958 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e011      	b.n	800097c <ds1307_set_current_time+0x80>
	} else {
		hrs |= (1 << 6);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095e:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	78db      	ldrb	r3, [r3, #3]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d104      	bne.n	8000972 <ds1307_set_current_time+0x76>
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	b2db      	uxtb	r3, r3
 8000970:	e003      	b.n	800097a <ds1307_set_current_time+0x7e>
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	f023 0320 	bic.w	r3, r3, #32
 8000978:	b2db      	uxtb	r3, r3
 800097a:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs, DS1307_ADDR_HRS);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff1d 	bl	80007c0 <ds1307_write>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]

	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff4a 	bl	8000834 <binary_to_bcd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff0b 	bl	80007c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff40 	bl	8000834 <binary_to_bcd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2105      	movs	r1, #5
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff01 	bl	80007c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	789b      	ldrb	r3, [r3, #2]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff36 	bl	8000834 <binary_to_bcd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2106      	movs	r1, #6
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fef7 	bl	80007c0 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	78db      	ldrb	r3, [r3, #3]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff2c 	bl	8000834 <binary_to_bcd>
 80009dc:	4603      	mov	r3, r0
 80009de:	2103      	movs	r1, #3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff feed 	bl	80007c0 <ds1307_write>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff fefe 	bl	80007f8 <ds1307_read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a06:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff3e 	bl	800088c <bcd_to_binary>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	701a      	strb	r2, [r3, #0]

	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff feed 	bl	80007f8 <ds1307_read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff33 	bl	800088c <bcd_to_binary>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff fee2 	bl	80007f8 <ds1307_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	if(hrs & ( 1 << 6)) {
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00f      	beq.n	8000a62 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format = !((hrs & (1 << 5)) == 0) ;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	bf14      	ite	ne
 8000a4c:	2301      	movne	r3, #1
 8000a4e:	2300      	moveq	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5); //Clear 6 and 5
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e002      	b.n	8000a68 <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff0e 	bl	800088c <bcd_to_binary>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	709a      	strb	r2, [r3, #2]
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f7ff feb5 	bl	80007f8 <ds1307_read>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fefb 	bl	800088c <bcd_to_binary>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000a9e:	2004      	movs	r0, #4
 8000aa0:	f7ff feaa 	bl	80007f8 <ds1307_read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fef0 	bl	800088c <bcd_to_binary>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000ab4:	2005      	movs	r0, #5
 8000ab6:	f7ff fe9f 	bl	80007f8 <ds1307_read>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fee5 	bl	800088c <bcd_to_binary>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000aca:	2006      	movs	r0, #6
 8000acc:	f7ff fe94 	bl	80007f8 <ds1307_read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff feda 	bl	800088c <bcd_to_binary>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	709a      	strb	r2, [r3, #2]
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <write_4_bits>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	2103      	movs	r1, #3
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <write_4_bits+0x6c>)
 8000b00:	f000 fbe0 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	2104      	movs	r1, #4
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <write_4_bits+0x6c>)
 8000b16:	f000 fbd5 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	2105      	movs	r1, #5
 8000b2a:	480a      	ldr	r0, [pc, #40]	; (8000b54 <write_4_bits+0x6c>)
 8000b2c:	f000 fbca 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2106      	movs	r1, #6
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <write_4_bits+0x6c>)
 8000b42:	f000 fbbf 	bl	80012c4 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000b46:	f000 f807 	bl	8000b58 <lcd_enable>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020000 	.word	0x40020000

08000b58 <lcd_enable>:

static void lcd_enable(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <lcd_enable+0x28>)
 8000b62:	f000 fbaf 	bl	80012c4 <GPIO_WriteToOutputPin>
	udelay(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f000 f824 	bl	8000bb4 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <lcd_enable+0x28>)
 8000b72:	f000 fba7 	bl	80012c4 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 f81c 	bl	8000bb4 <udelay>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40020000 	.word	0x40020000

08000b84 <mdelay>:

static void mdelay(uint32_t cnt) {
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0 ; i < (cnt * 1000); i++);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e002      	b.n	8000b98 <mdelay+0x14>
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d3f4      	bcc.n	8000b92 <mdelay+0xe>
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <udelay>:

static void udelay(uint32_t cnt) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0 ; i < (cnt * 1); i++);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e002      	b.n	8000bc8 <udelay+0x14>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3f8      	bcc.n	8000bc2 <udelay+0xe>
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <lcd_send_command>:


void lcd_send_command(uint8_t cmd) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	/* RS = 0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <lcd_send_command+0x40>)
 8000bec:	f000 fb6a 	bl	80012c4 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <lcd_send_command+0x40>)
 8000bf6:	f000 fb65 	bl	80012c4 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff71 	bl	8000ae8 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 030f 	and.w	r3, r3, #15
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff6a 	bl	8000ae8 <write_4_bits>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020000 	.word	0x40020000

08000c20 <lcd_print_char>:
 * This function sends a character to the LCD
 * Here we used 4 bit parallel data transmission.
 * First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 * Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <lcd_print_char+0x40>)
 8000c30:	f000 fb48 	bl	80012c4 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2101      	movs	r1, #1
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <lcd_print_char+0x40>)
 8000c3a:	f000 fb43 	bl	80012c4 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);   /* Higher nibble */
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff4f 	bl	8000ae8 <write_4_bits>
	write_4_bits(data & 0x0F); /* Lower nibble */
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff48 	bl	8000ae8 <write_4_bits>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40020000 	.word	0x40020000

08000c64 <lcd_print_string>:


void lcd_print_string(char *message) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	do {
	  lcd_print_char((uint8_t)*message++);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffd3 	bl	8000c20 <lcd_print_char>
	} while (*message != '\0');
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f4      	bne.n	8000c6c <lcd_print_string+0x8>
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <lcd_init>:


void lcd_init(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
	//Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <lcd_init+0x110>)
 8000c94:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c96:	2301      	movs	r3, #1
 8000c98:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f983 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f97d 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f977 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f971 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f96b 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f965 	bl	8000fb8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f95f 	bl	8000fb8 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4827      	ldr	r0, [pc, #156]	; (8000d9c <lcd_init+0x110>)
 8000d00:	f000 fae0 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <lcd_init+0x110>)
 8000d0a:	f000 fadb 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2102      	movs	r1, #2
 8000d12:	4822      	ldr	r0, [pc, #136]	; (8000d9c <lcd_init+0x110>)
 8000d14:	f000 fad6 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <lcd_init+0x110>)
 8000d1e:	f000 fad1 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	481d      	ldr	r0, [pc, #116]	; (8000d9c <lcd_init+0x110>)
 8000d28:	f000 facc 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	481a      	ldr	r0, [pc, #104]	; (8000d9c <lcd_init+0x110>)
 8000d32:	f000 fac7 	bl	80012c4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2106      	movs	r1, #6
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <lcd_init+0x110>)
 8000d3c:	f000 fac2 	bl	80012c4 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f7ff ff1f 	bl	8000b84 <mdelay>

	/* RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4814      	ldr	r0, [pc, #80]	; (8000d9c <lcd_init+0x110>)
 8000d4c:	f000 faba 	bl	80012c4 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <lcd_init+0x110>)
 8000d56:	f000 fab5 	bl	80012c4 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff fec4 	bl	8000ae8 <write_4_bits>

	mdelay(5);
 8000d60:	2005      	movs	r0, #5
 8000d62:	f7ff ff0f 	bl	8000b84 <mdelay>

	write_4_bits(0x3);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f7ff febe 	bl	8000ae8 <write_4_bits>

	udelay(150);
 8000d6c:	2096      	movs	r0, #150	; 0x96
 8000d6e:	f7ff ff21 	bl	8000bb4 <udelay>

	write_4_bits(0x3);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f7ff feb8 	bl	8000ae8 <write_4_bits>
	write_4_bits(0x2);
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff feb5 	bl	8000ae8 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000d7e:	2028      	movs	r0, #40	; 0x28
 8000d80:	f7ff ff2c 	bl	8000bdc <lcd_send_command>

	//display ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000d84:	200e      	movs	r0, #14
 8000d86:	f7ff ff29 	bl	8000bdc <lcd_send_command>

	lcd_display_clear();
 8000d8a:	f000 f809 	bl	8000da0 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000d8e:	2006      	movs	r0, #6
 8000d90:	f7ff ff24 	bl	8000bdc <lcd_send_command>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020000 	.word	0x40020000

08000da0 <lcd_display_clear>:

void lcd_display_clear(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff ff19 	bl	8000bdc <lcd_send_command>
	/*
	 * check page number 24 of datasheet
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f7ff feea 	bl	8000b84 <mdelay>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff ff0f 	bl	8000bdc <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fee0 	bl	8000b84 <mdelay>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <lcd_set_cursor>:
/**
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	71bb      	strb	r3, [r7, #6]

	column--;
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	71bb      	strb	r3, [r7, #6]

	switch(row) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d002      	beq.n	8000dea <lcd_set_cursor+0x22>
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d009      	beq.n	8000dfc <lcd_set_cursor+0x34>
		  /* Set cursor to 2nd row address and add index*/
			lcd_send_command((column |= 0xC0));
		  break;

		default:
		  break;
 8000de8:	e011      	b.n	8000e0e <lcd_set_cursor+0x46>
		  lcd_send_command((column |= 0x80));
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fef1 	bl	8000bdc <lcd_send_command>
		  break;
 8000dfa:	e008      	b.n	8000e0e <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0xC0));
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e02:	71bb      	strb	r3, [r7, #6]
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fee8 	bl	8000bdc <lcd_send_command>
		  break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <GPIO_PClockControl>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t State) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]

	//Enable peripheral clock for specified GPIO Port A..H
	if(State == ENABLE) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d157      	bne.n	8000eda <GPIO_PClockControl+0xc2>

		if(pGPIOx == GPIOA) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a59      	ldr	r2, [pc, #356]	; (8000f94 <GPIO_PClockControl+0x17c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d106      	bne.n	8000e40 <GPIO_PClockControl+0x28>
			GPIOA_PCLK_EN();
 8000e32:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 8000e3e:	e0a3      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a56      	ldr	r2, [pc, #344]	; (8000f9c <GPIO_PClockControl+0x184>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d106      	bne.n	8000e56 <GPIO_PClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e54:	e098      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a51      	ldr	r2, [pc, #324]	; (8000fa0 <GPIO_PClockControl+0x188>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <GPIO_PClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a4d      	ldr	r2, [pc, #308]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e6a:	e08d      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <GPIO_PClockControl+0x18c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <GPIO_PClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e74:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e80:	e082      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a48      	ldr	r2, [pc, #288]	; (8000fa8 <GPIO_PClockControl+0x190>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_PClockControl+0x80>
			GPIOE_PCLK_EN();
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e96:	e077      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a44      	ldr	r2, [pc, #272]	; (8000fac <GPIO_PClockControl+0x194>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <GPIO_PClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eac:	e06c      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <GPIO_PClockControl+0x198>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <GPIO_PClockControl+0xac>
			GPIOG_PCLK_EN();
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a37      	ldr	r2, [pc, #220]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec2:	e061      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3b      	ldr	r2, [pc, #236]	; (8000fb4 <GPIO_PClockControl+0x19c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d15d      	bne.n	8000f88 <GPIO_PClockControl+0x170>
			GPIOH_PCLK_EN();
 8000ecc:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed8:	e056      	b.n	8000f88 <GPIO_PClockControl+0x170>
		if(pGPIOx == GPIOA) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <GPIO_PClockControl+0x17c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d106      	bne.n	8000ef0 <GPIO_PClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eee:	e04b      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOB) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <GPIO_PClockControl+0x184>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <GPIO_PClockControl+0xee>
			GPIOB_PCLK_DI();
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000efe:	f023 0302 	bic.w	r3, r3, #2
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f04:	e040      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOC) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <GPIO_PClockControl+0x188>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <GPIO_PClockControl+0x104>
			GPIOC_PCLK_DI();
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1a:	e035      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOD) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <GPIO_PClockControl+0x18c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d106      	bne.n	8000f32 <GPIO_PClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f2a:	f023 0308 	bic.w	r3, r3, #8
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f30:	e02a      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOE) {
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <GPIO_PClockControl+0x190>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <GPIO_PClockControl+0x130>
			GPIOE_PCLK_DI();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f40:	f023 0310 	bic.w	r3, r3, #16
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f46:	e01f      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOF) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <GPIO_PClockControl+0x194>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_PClockControl+0x146>
			GPIOF_PCLK_DI();
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f56:	f023 0320 	bic.w	r3, r3, #32
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5c:	e014      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOG) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <GPIO_PClockControl+0x198>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_PClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f72:	e009      	b.n	8000f88 <GPIO_PClockControl+0x170>
		} else if(pGPIOx == GPIOH) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <GPIO_PClockControl+0x19c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d105      	bne.n	8000f88 <GPIO_PClockControl+0x170>
			GPIOH_PCLK_DI();
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <GPIO_PClockControl+0x180>)
 8000f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40021c00 	.word	0x40021c00

08000fb8 <GPIO_Init>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

	//Peripheral Clock Enable
	GPIO_PClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff24 	bl	8000e18 <GPIO_PClockControl>

	//1. Configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	795b      	ldrb	r3, [r3, #5]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d820      	bhi.n	800101a <GPIO_Init+0x62>

		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e0a8      	b.n	800116c <GPIO_Init+0x1b4>

	} else {

		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d117      	bne.n	8001052 <GPIO_Init+0x9a>
			//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001022:	4b9e      	ldr	r3, [pc, #632]	; (800129c <GPIO_Init+0x2e4>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	7912      	ldrb	r2, [r2, #4]
 800102a:	4611      	mov	r1, r2
 800102c:	2201      	movs	r2, #1
 800102e:	408a      	lsls	r2, r1
 8001030:	4611      	mov	r1, r2
 8001032:	4a9a      	ldr	r2, [pc, #616]	; (800129c <GPIO_Init+0x2e4>)
 8001034:	430b      	orrs	r3, r1
 8001036:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001038:	4b98      	ldr	r3, [pc, #608]	; (800129c <GPIO_Init+0x2e4>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	7912      	ldrb	r2, [r2, #4]
 8001040:	4611      	mov	r1, r2
 8001042:	2201      	movs	r2, #1
 8001044:	408a      	lsls	r2, r1
 8001046:	43d2      	mvns	r2, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4a94      	ldr	r2, [pc, #592]	; (800129c <GPIO_Init+0x2e4>)
 800104c:	400b      	ands	r3, r1
 800104e:	6093      	str	r3, [r2, #8]
 8001050:	e035      	b.n	80010be <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RT) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d117      	bne.n	800108a <GPIO_Init+0xd2>
			//1. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800105a:	4b90      	ldr	r3, [pc, #576]	; (800129c <GPIO_Init+0x2e4>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	7912      	ldrb	r2, [r2, #4]
 8001062:	4611      	mov	r1, r2
 8001064:	2201      	movs	r2, #1
 8001066:	408a      	lsls	r2, r1
 8001068:	4611      	mov	r1, r2
 800106a:	4a8c      	ldr	r2, [pc, #560]	; (800129c <GPIO_Init+0x2e4>)
 800106c:	430b      	orrs	r3, r1
 800106e:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001070:	4b8a      	ldr	r3, [pc, #552]	; (800129c <GPIO_Init+0x2e4>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	7912      	ldrb	r2, [r2, #4]
 8001078:	4611      	mov	r1, r2
 800107a:	2201      	movs	r2, #1
 800107c:	408a      	lsls	r2, r1
 800107e:	43d2      	mvns	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4a86      	ldr	r2, [pc, #536]	; (800129c <GPIO_Init+0x2e4>)
 8001084:	400b      	ands	r3, r1
 8001086:	60d3      	str	r3, [r2, #12]
 8001088:	e019      	b.n	80010be <GPIO_Init+0x106>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	795b      	ldrb	r3, [r3, #5]
 800108e:	2b06      	cmp	r3, #6
 8001090:	d115      	bne.n	80010be <GPIO_Init+0x106>
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001092:	4b82      	ldr	r3, [pc, #520]	; (800129c <GPIO_Init+0x2e4>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	7912      	ldrb	r2, [r2, #4]
 800109a:	4611      	mov	r1, r2
 800109c:	2201      	movs	r2, #1
 800109e:	408a      	lsls	r2, r1
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a7e      	ldr	r2, [pc, #504]	; (800129c <GPIO_Init+0x2e4>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010a8:	4b7c      	ldr	r3, [pc, #496]	; (800129c <GPIO_Init+0x2e4>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7912      	ldrb	r2, [r2, #4]
 80010b0:	4611      	mov	r1, r2
 80010b2:	2201      	movs	r2, #1
 80010b4:	408a      	lsls	r2, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <GPIO_Init+0x2e4>)
 80010ba:	430b      	orrs	r3, r1
 80010bc:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	791b      	ldrb	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a72      	ldr	r2, [pc, #456]	; (80012a0 <GPIO_Init+0x2e8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <GPIO_Init+0x17a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a71      	ldr	r2, [pc, #452]	; (80012a4 <GPIO_Init+0x2ec>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d024      	beq.n	800112e <GPIO_Init+0x176>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a6f      	ldr	r2, [pc, #444]	; (80012a8 <GPIO_Init+0x2f0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01d      	beq.n	800112a <GPIO_Init+0x172>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6e      	ldr	r2, [pc, #440]	; (80012ac <GPIO_Init+0x2f4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d016      	beq.n	8001126 <GPIO_Init+0x16e>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <GPIO_Init+0x2f8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00f      	beq.n	8001122 <GPIO_Init+0x16a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6b      	ldr	r2, [pc, #428]	; (80012b4 <GPIO_Init+0x2fc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d008      	beq.n	800111e <GPIO_Init+0x166>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <GPIO_Init+0x300>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <GPIO_Init+0x162>
 8001116:	2306      	movs	r3, #6
 8001118:	e00c      	b.n	8001134 <GPIO_Init+0x17c>
 800111a:	2300      	movs	r3, #0
 800111c:	e00a      	b.n	8001134 <GPIO_Init+0x17c>
 800111e:	2305      	movs	r3, #5
 8001120:	e008      	b.n	8001134 <GPIO_Init+0x17c>
 8001122:	2304      	movs	r3, #4
 8001124:	e006      	b.n	8001134 <GPIO_Init+0x17c>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <GPIO_Init+0x17c>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <GPIO_Init+0x17c>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <GPIO_Init+0x17c>
 8001132:	2300      	movs	r3, #0
 8001134:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001136:	4b61      	ldr	r3, [pc, #388]	; (80012bc <GPIO_Init+0x304>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a60      	ldr	r2, [pc, #384]	; (80012bc <GPIO_Init+0x304>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001142:	7c7a      	ldrb	r2, [r7, #17]
 8001144:	7cbb      	ldrb	r3, [r7, #18]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f103 	lsl.w	r1, r2, r3
 800114c:	4a5c      	ldr	r2, [pc, #368]	; (80012c0 <GPIO_Init+0x308>)
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	3302      	adds	r3, #2
 8001152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <GPIO_Init+0x2e4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	7912      	ldrb	r2, [r2, #4]
 800115e:	4611      	mov	r1, r2
 8001160:	2201      	movs	r2, #1
 8001162:	408a      	lsls	r2, r1
 8001164:	4611      	mov	r1, r2
 8001166:	4a4d      	ldr	r2, [pc, #308]	; (800129c <GPIO_Init+0x2e4>)
 8001168:	430b      	orrs	r3, r1
 800116a:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	799b      	ldrb	r3, [r3, #6]
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2103      	movs	r1, #3
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4619      	mov	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	400a      	ands	r2, r1
 800119a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6899      	ldr	r1, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	79db      	ldrb	r3, [r3, #7]
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2103      	movs	r1, #3
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	//setting
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68d9      	ldr	r1, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	60da      	str	r2, [r3, #12]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	4619      	mov	r1, r3
 8001208:	2301      	movs	r3, #1
 800120a:	408b      	lsls	r3, r1
 800120c:	43db      	mvns	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6859      	ldr	r1, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d131      	bne.n	8001294 <GPIO_Init+0x2dc>
		//configure alt function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	7c3a      	ldrb	r2, [r7, #16]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	7c3a      	ldrb	r2, [r7, #16]
 8001262:	4001      	ands	r1, r0
 8001264:	3208      	adds	r2, #8
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2)); //setting
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	7c3a      	ldrb	r2, [r7, #16]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7a5b      	ldrb	r3, [r3, #9]
 800127a:	461a      	mov	r2, r3
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	7c3a      	ldrb	r2, [r7, #16]
 800128c:	4301      	orrs	r1, r0
 800128e:	3208      	adds	r2, #8
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013c00 	.word	0x40013c00
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800

080012c4 <GPIO_WriteToOutputPin>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
 80012d0:	4613      	mov	r3, r2
 80012d2:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET) {
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d109      	bne.n	80012ee <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	78fa      	ldrb	r2, [r7, #3]
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
	} else {
		//write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80012ec:	e009      	b.n	8001302 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	43d2      	mvns	r2, r2
 80012fc:	401a      	ands	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	615a      	str	r2, [r3, #20]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

/******************* Private Helper Functions *******************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 	// the LSB is R/nW bit which must be set to 0 for WRITE
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;  	// the LSB is R/nW bit which must be set to 1 for READ
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800136e:	78fa      	ldrb	r2, [r7, #3]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	611a      	str	r2, [r3, #16]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]

	uint32_t dummy_read;

	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01f      	beq.n	80013d4 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7f1b      	ldrb	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d112      	bne.n	80013c2 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d11f      	bne.n	80013e4 <I2C_ClearADDRFlag+0x66>
				//disable ACKing
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fa4b 	bl	8001846 <I2C_ManageAcking>

				//clear the ADDR flag (read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag (read SR1, read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80013c0:	e010      	b.n	80013e4 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	60fb      	str	r3, [r7, #12]
}
 80013d2:	e007      	b.n	80013e4 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	60fb      	str	r3, [r7, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <I2C_PClockControl>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void I2C_PClockControl(I2C_RegDef_t *pI2Cx, uint8_t State) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]

	//Enable peripheral clock for specified I2C peripheral 1..3
	if(State == ENABLE) {
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d120      	bne.n	8001440 <I2C_PClockControl+0x54>

		if(pI2Cx == I2C1) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <I2C_PClockControl+0xa0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d106      	bne.n	8001414 <I2C_PClockControl+0x28>
			I2C1_PCLK_EN();
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <I2C_PClockControl+0xa4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <I2C_PClockControl+0xa4>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if(pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}
 8001412:	e035      	b.n	8001480 <I2C_PClockControl+0x94>
		} else if(pI2Cx == I2C2) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <I2C_PClockControl+0xa8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d106      	bne.n	800142a <I2C_PClockControl+0x3e>
			I2C2_PCLK_EN();
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <I2C_PClockControl+0xa4>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <I2C_PClockControl+0xa4>)
 8001422:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001428:	e02a      	b.n	8001480 <I2C_PClockControl+0x94>
		} else if(pI2Cx == I2C3) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <I2C_PClockControl+0xac>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d126      	bne.n	8001480 <I2C_PClockControl+0x94>
			I2C3_PCLK_EN();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <I2C_PClockControl+0xa4>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <I2C_PClockControl+0xa4>)
 8001438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800143e:	e01f      	b.n	8001480 <I2C_PClockControl+0x94>
		if(pI2Cx == I2C1) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <I2C_PClockControl+0xa0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d106      	bne.n	8001456 <I2C_PClockControl+0x6a>
			I2C1_PCLK_DI();
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <I2C_PClockControl+0xa4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <I2C_PClockControl+0xa4>)
 800144e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001454:	e014      	b.n	8001480 <I2C_PClockControl+0x94>
		} else if(pI2Cx == I2C2) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <I2C_PClockControl+0xa8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d106      	bne.n	800146c <I2C_PClockControl+0x80>
			I2C2_PCLK_DI();
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <I2C_PClockControl+0xa4>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <I2C_PClockControl+0xa4>)
 8001464:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
}
 800146a:	e009      	b.n	8001480 <I2C_PClockControl+0x94>
		} else if(pI2Cx == I2C3) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <I2C_PClockControl+0xac>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d105      	bne.n	8001480 <I2C_PClockControl+0x94>
			I2C3_PCLK_DI();
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <I2C_PClockControl+0xa4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <I2C_PClockControl+0xa4>)
 800147a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40005400 	.word	0x40005400
 8001490:	40023800 	.word	0x40023800
 8001494:	40005800 	.word	0x40005800
 8001498:	40005c00 	.word	0x40005c00

0800149c <I2C_Init>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2c peripheral
	I2C_PClockControl(pI2CHandle->pI2Cx, ENABLE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff9c 	bl	80013ec <I2C_PClockControl>

	//1. ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a5b      	ldrb	r3, [r3, #9]
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]

	//2. configure the FREQ field of CR2
	tempreg = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 80014ce:	f000 f9e5 	bl	800189c <RCC_GetPCLK1Value>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <I2C_Init+0x158>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); //mask all bits except the first 5 bits
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014ec:	605a      	str	r2, [r3, #4]

	//3. program the device's own address (helpful if device is slave)
	tempreg = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7a1b      	ldrb	r3, [r3, #8]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	609a      	str	r2, [r3, #8]

	//4. CCR calculations
	uint16_t ccr_value = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_Speed_SM) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a36      	ldr	r2, [pc, #216]	; (80015f8 <I2C_Init+0x15c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d80f      	bhi.n	8001542 <I2C_Init+0xa6>
		//standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //50% duty cycle
 8001522:	f000 f9bb 	bl	800189c <RCC_GetPCLK1Value>
 8001526:	4602      	mov	r2, r0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF); //mask all bits except the first 12 bits
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e02d      	b.n	800159e <I2C_Init+0x102>
	} else {
		//fast mode
		tempreg |= (1 << 15);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	895b      	ldrh	r3, [r3, #10]
 800154e:	039b      	lsls	r3, r3, #14
 8001550:	461a      	mov	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	895b      	ldrh	r3, [r3, #10]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //DUTY = 0
 8001560:	f000 f99c 	bl	800189c <RCC_GetPCLK1Value>
 8001564:	4601      	mov	r1, r0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	fbb1 f3f3 	udiv	r3, r1, r3
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	e00c      	b.n	8001592 <I2C_Init+0xf6>
		} else {
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed)); //DUTY = 1
 8001578:	f000 f990 	bl	800189c <RCC_GetPCLK1Value>
 800157c:	4601      	mov	r1, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001590:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF); //mask all bits except the first 12 bits
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	61da      	str	r2, [r3, #28]

	//5. TRISE
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_Speed_SM) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <I2C_Init+0x15c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d809      	bhi.n	80015c4 <I2C_Init+0x128>
		//configure the trise in std mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80015b0:	f000 f974 	bl	800189c <RCC_GetPCLK1Value>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <I2C_Init+0x158>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e00d      	b.n	80015e0 <I2C_Init+0x144>
	} else {
		//configure the trise in fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80015c4:	f000 f96a 	bl	800189c <RCC_GetPCLK1Value>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <I2C_Init+0x160>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	09db      	lsrs	r3, r3, #7
 80015dc:	3301      	adds	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015ea:	621a      	str	r2, [r3, #32]
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	000186a0 	.word	0x000186a0
 80015fc:	00044b83 	.word	0x00044b83

08001600 <I2C_MasterSendData>:
 * @return				-  None
 *
 * @note				-  Polling based (blocking)
 *
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddress, uint8_t SR) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	70fb      	strb	r3, [r7, #3]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe7a 	bl	800130c <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared, SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8001618:	bf00      	nop
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f8fd 	bl	8001820 <I2C_GetFlagStatus>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f6      	beq.n	800161a <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddress);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe78 	bl	800132a <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800163a:	bf00      	nop
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2102      	movs	r1, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f8ec 	bl	8001820 <I2C_GetFlagStatus>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f6      	beq.n	800163c <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared, SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe95 	bl	800137e <I2C_ClearADDRFlag>

	//6. Send the data until Len becomes 0
	while(Len > 0) {
 8001654:	e014      	b.n	8001680 <I2C_MasterSendData+0x80>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //wait until TXE is set
 8001656:	bf00      	nop
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f8de 	bl	8001820 <I2C_GetFlagStatus>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f6      	beq.n	8001658 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3301      	adds	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
		Len--;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e7      	bne.n	8001656 <I2C_MasterSendData+0x56>
	}

	//7. When Len becomes zero, wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//   when BTF=1, SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //wait until TXE is set
 8001686:	bf00      	nop
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f8c6 	bl	8001820 <I2C_GetFlagStatus>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f6      	beq.n	8001688 <I2C_MasterSendData+0x88>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF)); //wait until BTF is set
 800169a:	bf00      	nop
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2104      	movs	r1, #4
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f8bc 	bl	8001820 <I2C_GetFlagStatus>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f6      	beq.n	800169c <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//	 Note: generating STOP, automatically clears the BTF.
	if(SR == I2C_DISABLE_SR) {
 80016ae:	7e3b      	ldrb	r3, [r7, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f8df 	bl	800187c <I2C_GenerateStopCondition>
	}
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <I2C_MasterReceiveData>:
 * @return				-  None
 *
 * @note				-  Polling based (blocking)
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddress, uint8_t SR) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	4611      	mov	r1, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	460b      	mov	r3, r1
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe13 	bl	800130c <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared, SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80016e6:	bf00      	nop
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f896 	bl	8001820 <I2C_GetFlagStatus>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f6      	beq.n	80016e8 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddress);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	79ba      	ldrb	r2, [r7, #6]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe26 	bl	8001354 <I2C_ExecuteAddressPhaseRead>

	//4. Wait until address phase is completed by checking the ADDR flag in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8001708:	bf00      	nop
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2102      	movs	r1, #2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f885 	bl	8001820 <I2C_GetFlagStatus>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f6      	beq.n	800170a <I2C_MasterReceiveData+0x44>

	//Procedure to read only 1 byte from slave
	if(Len == 1) {
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d121      	bne.n	8001766 <I2C_MasterReceiveData+0xa0>
		//Disable ACKing
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f88c 	bl	8001846 <I2C_ManageAcking>

		//Clear the Addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fe25 	bl	800137e <I2C_ClearADDRFlag>

		//Wait until RXNE=1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8001734:	bf00      	nop
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f86f 	bl	8001820 <I2C_GetFlagStatus>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f6      	beq.n	8001736 <I2C_MasterReceiveData+0x70>

		//Generate STOP condition
		if(SR == I2C_DISABLE_SR) {
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d104      	bne.n	800175a <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f891 	bl	800187c <I2C_GenerateStopCondition>
		}

		//Read data into buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	701a      	strb	r2, [r3, #0]
	}

	//Procedure to read data from slave when Len > 1
	if(Len > 1) {
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d930      	bls.n	80017ce <I2C_MasterReceiveData+0x108>
		//Clear the Addr flag
		I2C_ClearADDRFlag(pI2CHandle);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7ff fe06 	bl	800137e <I2C_ClearADDRFlag>

		//Read the data until Len becomes zero
		for(uint32_t i = Len; i > 0; i--) {
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e027      	b.n	80017c8 <I2C_MasterReceiveData+0x102>

			//Wait until RXNE=1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 8001778:	bf00      	nop
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f84d 	bl	8001820 <I2C_GetFlagStatus>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f6      	beq.n	800177a <I2C_MasterReceiveData+0xb4>

			if(i == 2) { //If last 2 bytes are remaining
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d10e      	bne.n	80017b0 <I2C_MasterReceiveData+0xea>
				//Clear the ACK bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f854 	bl	8001846 <I2C_ManageAcking>

				//Generate STOP condition
				if(SR == I2C_DISABLE_SR) {
 800179e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d104      	bne.n	80017b0 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f866 	bl	800187c <I2C_GenerateStopCondition>
				}
			}
			//Read the data from data register into buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	701a      	strb	r2, [r3, #0]

			//Increment the buffer address
			pRxBuffer++;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3301      	adds	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--) {
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1d4      	bne.n	8001778 <I2C_MasterReceiveData+0xb2>
		}
	}

	//Re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7a5b      	ldrb	r3, [r3, #9]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d105      	bne.n	80017e2 <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f832 	bl	8001846 <I2C_ManageAcking>
	}
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <I2C_PeripheralControl>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t State) {
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]

	if(State == ENABLE) {
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <I2C_PeripheralControl+0x20>
 		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	601a      	str	r2, [r3, #0]
 		//pI2CBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
 	} else {
 		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8001808:	e005      	b.n	8001816 <I2C_PeripheralControl+0x2c>
 		pI2Cx->CR1 &= ~(1 << 0);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0201 	bic.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <I2C_GetFlagStatus>:
 * @return				-  Byte containing flag status info
 *
 * @note				-  None
 *
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <I2C_ManageAcking>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t State) {
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	70fb      	strb	r3, [r7, #3]

	if(State == I2C_ACK_ENABLE) {
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <I2C_ManageAcking+0x20>
		//enable the ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	601a      	str	r2, [r3, #0]
	} else {
		//disable the ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001864:	e005      	b.n	8001872 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <I2C_GenerateStopCondition>:
 * @return				-  None
 *
 * @note				-  None
 *
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
	...

0800189c <RCC_GetPCLK1Value>:
 *
 * @return            - APB1 clock value
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK1Value(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <RCC_GetPCLK1Value+0x9c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0) {
 80018b0:	7a7b      	ldrb	r3, [r7, #9]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <RCC_GetPCLK1Value+0xa0>)
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e00b      	b.n	80018d4 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1) {
 80018bc:	7a7b      	ldrb	r3, [r7, #9]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <RCC_GetPCLK1Value+0xa4>)
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e005      	b.n	80018d4 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 2) {
 80018c8:	7a7b      	ldrb	r3, [r7, #9]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d102      	bne.n	80018d4 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80018ce:	f000 f83d 	bl	800194c <RCC_GetPLLOutputClock>
 80018d2:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <RCC_GetPCLK1Value+0x9c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	723b      	strb	r3, [r7, #8]

	if(temp < 8) {
 80018e2:	7a3b      	ldrb	r3, [r7, #8]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d802      	bhi.n	80018ee <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	72fb      	strb	r3, [r7, #11]
 80018ec:	e005      	b.n	80018fa <RCC_GetPCLK1Value+0x5e>
	} else {
		ahbp = AHB_PreScaler[temp - 8];
 80018ee:	7a3b      	ldrb	r3, [r7, #8]
 80018f0:	3b08      	subs	r3, #8
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <RCC_GetPCLK1Value+0xa8>)
 80018f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f8:	72fb      	strb	r3, [r7, #11]
	}

	//for APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <RCC_GetPCLK1Value+0x9c>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0a9b      	lsrs	r3, r3, #10
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	723b      	strb	r3, [r7, #8]

	if(temp < 4) {
 8001908:	7a3b      	ldrb	r3, [r7, #8]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d802      	bhi.n	8001914 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	72bb      	strb	r3, [r7, #10]
 8001912:	e004      	b.n	800191e <RCC_GetPCLK1Value+0x82>
	} else {
		apb1p = APB1_PreScaler[temp - 4];
 8001914:	7a3b      	ldrb	r3, [r7, #8]
 8001916:	3b04      	subs	r3, #4
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <RCC_GetPCLK1Value+0xac>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((SystemClk / ahbp) / apb1p);
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	fbb2 f2f3 	udiv	r2, r2, r3
 8001926:	7abb      	ldrb	r3, [r7, #10]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200
 8001944:	20000000 	.word	0x20000000
 8001948:	20000010 	.word	0x20000010

0800194c <RCC_GetPLLOutputClock>:
 *
 * @return            - PLL Output clock value
 *
 * @Note              - <WORK IN PROGRESS>
 */
uint32_t RCC_GetPLLOutputClock(void) {
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <__errno>:
 800195c:	4b01      	ldr	r3, [pc, #4]	; (8001964 <__errno+0x8>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000014 	.word	0x20000014

08001968 <__libc_init_array>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	4d0d      	ldr	r5, [pc, #52]	; (80019a0 <__libc_init_array+0x38>)
 800196c:	4c0d      	ldr	r4, [pc, #52]	; (80019a4 <__libc_init_array+0x3c>)
 800196e:	1b64      	subs	r4, r4, r5
 8001970:	10a4      	asrs	r4, r4, #2
 8001972:	2600      	movs	r6, #0
 8001974:	42a6      	cmp	r6, r4
 8001976:	d109      	bne.n	800198c <__libc_init_array+0x24>
 8001978:	4d0b      	ldr	r5, [pc, #44]	; (80019a8 <__libc_init_array+0x40>)
 800197a:	4c0c      	ldr	r4, [pc, #48]	; (80019ac <__libc_init_array+0x44>)
 800197c:	f000 fce4 	bl	8002348 <_init>
 8001980:	1b64      	subs	r4, r4, r5
 8001982:	10a4      	asrs	r4, r4, #2
 8001984:	2600      	movs	r6, #0
 8001986:	42a6      	cmp	r6, r4
 8001988:	d105      	bne.n	8001996 <__libc_init_array+0x2e>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001990:	4798      	blx	r3
 8001992:	3601      	adds	r6, #1
 8001994:	e7ee      	b.n	8001974 <__libc_init_array+0xc>
 8001996:	f855 3b04 	ldr.w	r3, [r5], #4
 800199a:	4798      	blx	r3
 800199c:	3601      	adds	r6, #1
 800199e:	e7f2      	b.n	8001986 <__libc_init_array+0x1e>
 80019a0:	0800244c 	.word	0x0800244c
 80019a4:	0800244c 	.word	0x0800244c
 80019a8:	0800244c 	.word	0x0800244c
 80019ac:	08002450 	.word	0x08002450

080019b0 <memset>:
 80019b0:	4402      	add	r2, r0
 80019b2:	4603      	mov	r3, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <memset+0xa>
 80019b8:	4770      	bx	lr
 80019ba:	f803 1b01 	strb.w	r1, [r3], #1
 80019be:	e7f9      	b.n	80019b4 <memset+0x4>

080019c0 <_puts_r>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460e      	mov	r6, r1
 80019c4:	4605      	mov	r5, r0
 80019c6:	b118      	cbz	r0, 80019d0 <_puts_r+0x10>
 80019c8:	6983      	ldr	r3, [r0, #24]
 80019ca:	b90b      	cbnz	r3, 80019d0 <_puts_r+0x10>
 80019cc:	f000 fa48 	bl	8001e60 <__sinit>
 80019d0:	69ab      	ldr	r3, [r5, #24]
 80019d2:	68ac      	ldr	r4, [r5, #8]
 80019d4:	b913      	cbnz	r3, 80019dc <_puts_r+0x1c>
 80019d6:	4628      	mov	r0, r5
 80019d8:	f000 fa42 	bl	8001e60 <__sinit>
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <_puts_r+0xd0>)
 80019de:	429c      	cmp	r4, r3
 80019e0:	d120      	bne.n	8001a24 <_puts_r+0x64>
 80019e2:	686c      	ldr	r4, [r5, #4]
 80019e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019e6:	07db      	lsls	r3, r3, #31
 80019e8:	d405      	bmi.n	80019f6 <_puts_r+0x36>
 80019ea:	89a3      	ldrh	r3, [r4, #12]
 80019ec:	0598      	lsls	r0, r3, #22
 80019ee:	d402      	bmi.n	80019f6 <_puts_r+0x36>
 80019f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019f2:	f000 fad3 	bl	8001f9c <__retarget_lock_acquire_recursive>
 80019f6:	89a3      	ldrh	r3, [r4, #12]
 80019f8:	0719      	lsls	r1, r3, #28
 80019fa:	d51d      	bpl.n	8001a38 <_puts_r+0x78>
 80019fc:	6923      	ldr	r3, [r4, #16]
 80019fe:	b1db      	cbz	r3, 8001a38 <_puts_r+0x78>
 8001a00:	3e01      	subs	r6, #1
 8001a02:	68a3      	ldr	r3, [r4, #8]
 8001a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60a3      	str	r3, [r4, #8]
 8001a0c:	bb39      	cbnz	r1, 8001a5e <_puts_r+0x9e>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da38      	bge.n	8001a84 <_puts_r+0xc4>
 8001a12:	4622      	mov	r2, r4
 8001a14:	210a      	movs	r1, #10
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 f848 	bl	8001aac <__swbuf_r>
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	d011      	beq.n	8001a44 <_puts_r+0x84>
 8001a20:	250a      	movs	r5, #10
 8001a22:	e011      	b.n	8001a48 <_puts_r+0x88>
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <_puts_r+0xd4>)
 8001a26:	429c      	cmp	r4, r3
 8001a28:	d101      	bne.n	8001a2e <_puts_r+0x6e>
 8001a2a:	68ac      	ldr	r4, [r5, #8]
 8001a2c:	e7da      	b.n	80019e4 <_puts_r+0x24>
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <_puts_r+0xd8>)
 8001a30:	429c      	cmp	r4, r3
 8001a32:	bf08      	it	eq
 8001a34:	68ec      	ldreq	r4, [r5, #12]
 8001a36:	e7d5      	b.n	80019e4 <_puts_r+0x24>
 8001a38:	4621      	mov	r1, r4
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f000 f888 	bl	8001b50 <__swsetup_r>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d0dd      	beq.n	8001a00 <_puts_r+0x40>
 8001a44:	f04f 35ff 	mov.w	r5, #4294967295
 8001a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a4a:	07da      	lsls	r2, r3, #31
 8001a4c:	d405      	bmi.n	8001a5a <_puts_r+0x9a>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	059b      	lsls	r3, r3, #22
 8001a52:	d402      	bmi.n	8001a5a <_puts_r+0x9a>
 8001a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a56:	f000 faa2 	bl	8001f9e <__retarget_lock_release_recursive>
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da04      	bge.n	8001a6c <_puts_r+0xac>
 8001a62:	69a2      	ldr	r2, [r4, #24]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dc06      	bgt.n	8001a76 <_puts_r+0xb6>
 8001a68:	290a      	cmp	r1, #10
 8001a6a:	d004      	beq.n	8001a76 <_puts_r+0xb6>
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	6022      	str	r2, [r4, #0]
 8001a72:	7019      	strb	r1, [r3, #0]
 8001a74:	e7c5      	b.n	8001a02 <_puts_r+0x42>
 8001a76:	4622      	mov	r2, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 f817 	bl	8001aac <__swbuf_r>
 8001a7e:	3001      	adds	r0, #1
 8001a80:	d1bf      	bne.n	8001a02 <_puts_r+0x42>
 8001a82:	e7df      	b.n	8001a44 <_puts_r+0x84>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	250a      	movs	r5, #10
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	6022      	str	r2, [r4, #0]
 8001a8c:	701d      	strb	r5, [r3, #0]
 8001a8e:	e7db      	b.n	8001a48 <_puts_r+0x88>
 8001a90:	0800240c 	.word	0x0800240c
 8001a94:	0800242c 	.word	0x0800242c
 8001a98:	080023ec 	.word	0x080023ec

08001a9c <puts>:
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <puts+0xc>)
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f7ff bf8d 	b.w	80019c0 <_puts_r>
 8001aa6:	bf00      	nop
 8001aa8:	20000014 	.word	0x20000014

08001aac <__swbuf_r>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	460e      	mov	r6, r1
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	4605      	mov	r5, r0
 8001ab4:	b118      	cbz	r0, 8001abe <__swbuf_r+0x12>
 8001ab6:	6983      	ldr	r3, [r0, #24]
 8001ab8:	b90b      	cbnz	r3, 8001abe <__swbuf_r+0x12>
 8001aba:	f000 f9d1 	bl	8001e60 <__sinit>
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <__swbuf_r+0x98>)
 8001ac0:	429c      	cmp	r4, r3
 8001ac2:	d12b      	bne.n	8001b1c <__swbuf_r+0x70>
 8001ac4:	686c      	ldr	r4, [r5, #4]
 8001ac6:	69a3      	ldr	r3, [r4, #24]
 8001ac8:	60a3      	str	r3, [r4, #8]
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	071a      	lsls	r2, r3, #28
 8001ace:	d52f      	bpl.n	8001b30 <__swbuf_r+0x84>
 8001ad0:	6923      	ldr	r3, [r4, #16]
 8001ad2:	b36b      	cbz	r3, 8001b30 <__swbuf_r+0x84>
 8001ad4:	6923      	ldr	r3, [r4, #16]
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	1ac0      	subs	r0, r0, r3
 8001ada:	6963      	ldr	r3, [r4, #20]
 8001adc:	b2f6      	uxtb	r6, r6
 8001ade:	4283      	cmp	r3, r0
 8001ae0:	4637      	mov	r7, r6
 8001ae2:	dc04      	bgt.n	8001aee <__swbuf_r+0x42>
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 f926 	bl	8001d38 <_fflush_r>
 8001aec:	bb30      	cbnz	r0, 8001b3c <__swbuf_r+0x90>
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60a3      	str	r3, [r4, #8]
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	6022      	str	r2, [r4, #0]
 8001afa:	701e      	strb	r6, [r3, #0]
 8001afc:	6963      	ldr	r3, [r4, #20]
 8001afe:	3001      	adds	r0, #1
 8001b00:	4283      	cmp	r3, r0
 8001b02:	d004      	beq.n	8001b0e <__swbuf_r+0x62>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	07db      	lsls	r3, r3, #31
 8001b08:	d506      	bpl.n	8001b18 <__swbuf_r+0x6c>
 8001b0a:	2e0a      	cmp	r6, #10
 8001b0c:	d104      	bne.n	8001b18 <__swbuf_r+0x6c>
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 f911 	bl	8001d38 <_fflush_r>
 8001b16:	b988      	cbnz	r0, 8001b3c <__swbuf_r+0x90>
 8001b18:	4638      	mov	r0, r7
 8001b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <__swbuf_r+0x9c>)
 8001b1e:	429c      	cmp	r4, r3
 8001b20:	d101      	bne.n	8001b26 <__swbuf_r+0x7a>
 8001b22:	68ac      	ldr	r4, [r5, #8]
 8001b24:	e7cf      	b.n	8001ac6 <__swbuf_r+0x1a>
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <__swbuf_r+0xa0>)
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	bf08      	it	eq
 8001b2c:	68ec      	ldreq	r4, [r5, #12]
 8001b2e:	e7ca      	b.n	8001ac6 <__swbuf_r+0x1a>
 8001b30:	4621      	mov	r1, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 f80c 	bl	8001b50 <__swsetup_r>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d0cb      	beq.n	8001ad4 <__swbuf_r+0x28>
 8001b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8001b40:	e7ea      	b.n	8001b18 <__swbuf_r+0x6c>
 8001b42:	bf00      	nop
 8001b44:	0800240c 	.word	0x0800240c
 8001b48:	0800242c 	.word	0x0800242c
 8001b4c:	080023ec 	.word	0x080023ec

08001b50 <__swsetup_r>:
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <__swsetup_r+0xcc>)
 8001b52:	b570      	push	{r4, r5, r6, lr}
 8001b54:	681d      	ldr	r5, [r3, #0]
 8001b56:	4606      	mov	r6, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	b125      	cbz	r5, 8001b66 <__swsetup_r+0x16>
 8001b5c:	69ab      	ldr	r3, [r5, #24]
 8001b5e:	b913      	cbnz	r3, 8001b66 <__swsetup_r+0x16>
 8001b60:	4628      	mov	r0, r5
 8001b62:	f000 f97d 	bl	8001e60 <__sinit>
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <__swsetup_r+0xd0>)
 8001b68:	429c      	cmp	r4, r3
 8001b6a:	d10f      	bne.n	8001b8c <__swsetup_r+0x3c>
 8001b6c:	686c      	ldr	r4, [r5, #4]
 8001b6e:	89a3      	ldrh	r3, [r4, #12]
 8001b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b74:	0719      	lsls	r1, r3, #28
 8001b76:	d42c      	bmi.n	8001bd2 <__swsetup_r+0x82>
 8001b78:	06dd      	lsls	r5, r3, #27
 8001b7a:	d411      	bmi.n	8001ba0 <__swsetup_r+0x50>
 8001b7c:	2309      	movs	r3, #9
 8001b7e:	6033      	str	r3, [r6, #0]
 8001b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b84:	81a3      	strh	r3, [r4, #12]
 8001b86:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8a:	e03e      	b.n	8001c0a <__swsetup_r+0xba>
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <__swsetup_r+0xd4>)
 8001b8e:	429c      	cmp	r4, r3
 8001b90:	d101      	bne.n	8001b96 <__swsetup_r+0x46>
 8001b92:	68ac      	ldr	r4, [r5, #8]
 8001b94:	e7eb      	b.n	8001b6e <__swsetup_r+0x1e>
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <__swsetup_r+0xd8>)
 8001b98:	429c      	cmp	r4, r3
 8001b9a:	bf08      	it	eq
 8001b9c:	68ec      	ldreq	r4, [r5, #12]
 8001b9e:	e7e6      	b.n	8001b6e <__swsetup_r+0x1e>
 8001ba0:	0758      	lsls	r0, r3, #29
 8001ba2:	d512      	bpl.n	8001bca <__swsetup_r+0x7a>
 8001ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ba6:	b141      	cbz	r1, 8001bba <__swsetup_r+0x6a>
 8001ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bac:	4299      	cmp	r1, r3
 8001bae:	d002      	beq.n	8001bb6 <__swsetup_r+0x66>
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	f000 fa59 	bl	8002068 <_free_r>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bc0:	81a3      	strh	r3, [r4, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6063      	str	r3, [r4, #4]
 8001bc6:	6923      	ldr	r3, [r4, #16]
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	6923      	ldr	r3, [r4, #16]
 8001bd4:	b94b      	cbnz	r3, 8001bea <__swsetup_r+0x9a>
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be0:	d003      	beq.n	8001bea <__swsetup_r+0x9a>
 8001be2:	4621      	mov	r1, r4
 8001be4:	4630      	mov	r0, r6
 8001be6:	f000 f9ff 	bl	8001fe8 <__smakebuf_r>
 8001bea:	89a0      	ldrh	r0, [r4, #12]
 8001bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf0:	f010 0301 	ands.w	r3, r0, #1
 8001bf4:	d00a      	beq.n	8001c0c <__swsetup_r+0xbc>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60a3      	str	r3, [r4, #8]
 8001bfa:	6963      	ldr	r3, [r4, #20]
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	61a3      	str	r3, [r4, #24]
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	b943      	cbnz	r3, 8001c16 <__swsetup_r+0xc6>
 8001c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c08:	d1ba      	bne.n	8001b80 <__swsetup_r+0x30>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	0781      	lsls	r1, r0, #30
 8001c0e:	bf58      	it	pl
 8001c10:	6963      	ldrpl	r3, [r4, #20]
 8001c12:	60a3      	str	r3, [r4, #8]
 8001c14:	e7f4      	b.n	8001c00 <__swsetup_r+0xb0>
 8001c16:	2000      	movs	r0, #0
 8001c18:	e7f7      	b.n	8001c0a <__swsetup_r+0xba>
 8001c1a:	bf00      	nop
 8001c1c:	20000014 	.word	0x20000014
 8001c20:	0800240c 	.word	0x0800240c
 8001c24:	0800242c 	.word	0x0800242c
 8001c28:	080023ec 	.word	0x080023ec

08001c2c <__sflush_r>:
 8001c2c:	898a      	ldrh	r2, [r1, #12]
 8001c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c32:	4605      	mov	r5, r0
 8001c34:	0710      	lsls	r0, r2, #28
 8001c36:	460c      	mov	r4, r1
 8001c38:	d458      	bmi.n	8001cec <__sflush_r+0xc0>
 8001c3a:	684b      	ldr	r3, [r1, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dc05      	bgt.n	8001c4c <__sflush_r+0x20>
 8001c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc02      	bgt.n	8001c4c <__sflush_r+0x20>
 8001c46:	2000      	movs	r0, #0
 8001c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d0f9      	beq.n	8001c46 <__sflush_r+0x1a>
 8001c52:	2300      	movs	r3, #0
 8001c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c58:	682f      	ldr	r7, [r5, #0]
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	d032      	beq.n	8001cc4 <__sflush_r+0x98>
 8001c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	075a      	lsls	r2, r3, #29
 8001c64:	d505      	bpl.n	8001c72 <__sflush_r+0x46>
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	1ac0      	subs	r0, r0, r3
 8001c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c6c:	b10b      	cbz	r3, 8001c72 <__sflush_r+0x46>
 8001c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c70:	1ac0      	subs	r0, r0, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	4602      	mov	r2, r0
 8001c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c78:	6a21      	ldr	r1, [r4, #32]
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	47b0      	blx	r6
 8001c7e:	1c43      	adds	r3, r0, #1
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	d106      	bne.n	8001c92 <__sflush_r+0x66>
 8001c84:	6829      	ldr	r1, [r5, #0]
 8001c86:	291d      	cmp	r1, #29
 8001c88:	d82c      	bhi.n	8001ce4 <__sflush_r+0xb8>
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <__sflush_r+0x108>)
 8001c8c:	40ca      	lsrs	r2, r1
 8001c8e:	07d6      	lsls	r6, r2, #31
 8001c90:	d528      	bpl.n	8001ce4 <__sflush_r+0xb8>
 8001c92:	2200      	movs	r2, #0
 8001c94:	6062      	str	r2, [r4, #4]
 8001c96:	04d9      	lsls	r1, r3, #19
 8001c98:	6922      	ldr	r2, [r4, #16]
 8001c9a:	6022      	str	r2, [r4, #0]
 8001c9c:	d504      	bpl.n	8001ca8 <__sflush_r+0x7c>
 8001c9e:	1c42      	adds	r2, r0, #1
 8001ca0:	d101      	bne.n	8001ca6 <__sflush_r+0x7a>
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	b903      	cbnz	r3, 8001ca8 <__sflush_r+0x7c>
 8001ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001caa:	602f      	str	r7, [r5, #0]
 8001cac:	2900      	cmp	r1, #0
 8001cae:	d0ca      	beq.n	8001c46 <__sflush_r+0x1a>
 8001cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cb4:	4299      	cmp	r1, r3
 8001cb6:	d002      	beq.n	8001cbe <__sflush_r+0x92>
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f000 f9d5 	bl	8002068 <_free_r>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8001cc2:	e7c1      	b.n	8001c48 <__sflush_r+0x1c>
 8001cc4:	6a21      	ldr	r1, [r4, #32]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4628      	mov	r0, r5
 8001cca:	47b0      	blx	r6
 8001ccc:	1c41      	adds	r1, r0, #1
 8001cce:	d1c7      	bne.n	8001c60 <__sflush_r+0x34>
 8001cd0:	682b      	ldr	r3, [r5, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0c4      	beq.n	8001c60 <__sflush_r+0x34>
 8001cd6:	2b1d      	cmp	r3, #29
 8001cd8:	d001      	beq.n	8001cde <__sflush_r+0xb2>
 8001cda:	2b16      	cmp	r3, #22
 8001cdc:	d101      	bne.n	8001ce2 <__sflush_r+0xb6>
 8001cde:	602f      	str	r7, [r5, #0]
 8001ce0:	e7b1      	b.n	8001c46 <__sflush_r+0x1a>
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e7ad      	b.n	8001c48 <__sflush_r+0x1c>
 8001cec:	690f      	ldr	r7, [r1, #16]
 8001cee:	2f00      	cmp	r7, #0
 8001cf0:	d0a9      	beq.n	8001c46 <__sflush_r+0x1a>
 8001cf2:	0793      	lsls	r3, r2, #30
 8001cf4:	680e      	ldr	r6, [r1, #0]
 8001cf6:	bf08      	it	eq
 8001cf8:	694b      	ldreq	r3, [r1, #20]
 8001cfa:	600f      	str	r7, [r1, #0]
 8001cfc:	bf18      	it	ne
 8001cfe:	2300      	movne	r3, #0
 8001d00:	eba6 0807 	sub.w	r8, r6, r7
 8001d04:	608b      	str	r3, [r1, #8]
 8001d06:	f1b8 0f00 	cmp.w	r8, #0
 8001d0a:	dd9c      	ble.n	8001c46 <__sflush_r+0x1a>
 8001d0c:	6a21      	ldr	r1, [r4, #32]
 8001d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d10:	4643      	mov	r3, r8
 8001d12:	463a      	mov	r2, r7
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	dc06      	bgt.n	8001d2a <__sflush_r+0xfe>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	e78e      	b.n	8001c48 <__sflush_r+0x1c>
 8001d2a:	4407      	add	r7, r0
 8001d2c:	eba8 0800 	sub.w	r8, r8, r0
 8001d30:	e7e9      	b.n	8001d06 <__sflush_r+0xda>
 8001d32:	bf00      	nop
 8001d34:	20400001 	.word	0x20400001

08001d38 <_fflush_r>:
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	690b      	ldr	r3, [r1, #16]
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	b913      	cbnz	r3, 8001d48 <_fflush_r+0x10>
 8001d42:	2500      	movs	r5, #0
 8001d44:	4628      	mov	r0, r5
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	b118      	cbz	r0, 8001d52 <_fflush_r+0x1a>
 8001d4a:	6983      	ldr	r3, [r0, #24]
 8001d4c:	b90b      	cbnz	r3, 8001d52 <_fflush_r+0x1a>
 8001d4e:	f000 f887 	bl	8001e60 <__sinit>
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <_fflush_r+0x6c>)
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d11b      	bne.n	8001d90 <_fflush_r+0x58>
 8001d58:	686c      	ldr	r4, [r5, #4]
 8001d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ef      	beq.n	8001d42 <_fflush_r+0xa>
 8001d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d64:	07d0      	lsls	r0, r2, #31
 8001d66:	d404      	bmi.n	8001d72 <_fflush_r+0x3a>
 8001d68:	0599      	lsls	r1, r3, #22
 8001d6a:	d402      	bmi.n	8001d72 <_fflush_r+0x3a>
 8001d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d6e:	f000 f915 	bl	8001f9c <__retarget_lock_acquire_recursive>
 8001d72:	4628      	mov	r0, r5
 8001d74:	4621      	mov	r1, r4
 8001d76:	f7ff ff59 	bl	8001c2c <__sflush_r>
 8001d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d7c:	07da      	lsls	r2, r3, #31
 8001d7e:	4605      	mov	r5, r0
 8001d80:	d4e0      	bmi.n	8001d44 <_fflush_r+0xc>
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	059b      	lsls	r3, r3, #22
 8001d86:	d4dd      	bmi.n	8001d44 <_fflush_r+0xc>
 8001d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d8a:	f000 f908 	bl	8001f9e <__retarget_lock_release_recursive>
 8001d8e:	e7d9      	b.n	8001d44 <_fflush_r+0xc>
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <_fflush_r+0x70>)
 8001d92:	429c      	cmp	r4, r3
 8001d94:	d101      	bne.n	8001d9a <_fflush_r+0x62>
 8001d96:	68ac      	ldr	r4, [r5, #8]
 8001d98:	e7df      	b.n	8001d5a <_fflush_r+0x22>
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <_fflush_r+0x74>)
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	bf08      	it	eq
 8001da0:	68ec      	ldreq	r4, [r5, #12]
 8001da2:	e7da      	b.n	8001d5a <_fflush_r+0x22>
 8001da4:	0800240c 	.word	0x0800240c
 8001da8:	0800242c 	.word	0x0800242c
 8001dac:	080023ec 	.word	0x080023ec

08001db0 <std>:
 8001db0:	2300      	movs	r3, #0
 8001db2:	b510      	push	{r4, lr}
 8001db4:	4604      	mov	r4, r0
 8001db6:	e9c0 3300 	strd	r3, r3, [r0]
 8001dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dbe:	6083      	str	r3, [r0, #8]
 8001dc0:	8181      	strh	r1, [r0, #12]
 8001dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8001dc4:	81c2      	strh	r2, [r0, #14]
 8001dc6:	6183      	str	r3, [r0, #24]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2208      	movs	r2, #8
 8001dcc:	305c      	adds	r0, #92	; 0x5c
 8001dce:	f7ff fdef 	bl	80019b0 <memset>
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <std+0x38>)
 8001dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <std+0x3c>)
 8001dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <std+0x40>)
 8001ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <std+0x44>)
 8001de0:	6224      	str	r4, [r4, #32]
 8001de2:	6323      	str	r3, [r4, #48]	; 0x30
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	080021d9 	.word	0x080021d9
 8001dec:	080021fb 	.word	0x080021fb
 8001df0:	08002233 	.word	0x08002233
 8001df4:	08002257 	.word	0x08002257

08001df8 <_cleanup_r>:
 8001df8:	4901      	ldr	r1, [pc, #4]	; (8001e00 <_cleanup_r+0x8>)
 8001dfa:	f000 b8af 	b.w	8001f5c <_fwalk_reent>
 8001dfe:	bf00      	nop
 8001e00:	08001d39 	.word	0x08001d39

08001e04 <__sfmoreglue>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	1e4a      	subs	r2, r1, #1
 8001e08:	2568      	movs	r5, #104	; 0x68
 8001e0a:	4355      	muls	r5, r2
 8001e0c:	460e      	mov	r6, r1
 8001e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e12:	f000 f977 	bl	8002104 <_malloc_r>
 8001e16:	4604      	mov	r4, r0
 8001e18:	b140      	cbz	r0, 8001e2c <__sfmoreglue+0x28>
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8001e20:	300c      	adds	r0, #12
 8001e22:	60a0      	str	r0, [r4, #8]
 8001e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e28:	f7ff fdc2 	bl	80019b0 <memset>
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}

08001e30 <__sfp_lock_acquire>:
 8001e30:	4801      	ldr	r0, [pc, #4]	; (8001e38 <__sfp_lock_acquire+0x8>)
 8001e32:	f000 b8b3 	b.w	8001f9c <__retarget_lock_acquire_recursive>
 8001e36:	bf00      	nop
 8001e38:	200000e8 	.word	0x200000e8

08001e3c <__sfp_lock_release>:
 8001e3c:	4801      	ldr	r0, [pc, #4]	; (8001e44 <__sfp_lock_release+0x8>)
 8001e3e:	f000 b8ae 	b.w	8001f9e <__retarget_lock_release_recursive>
 8001e42:	bf00      	nop
 8001e44:	200000e8 	.word	0x200000e8

08001e48 <__sinit_lock_acquire>:
 8001e48:	4801      	ldr	r0, [pc, #4]	; (8001e50 <__sinit_lock_acquire+0x8>)
 8001e4a:	f000 b8a7 	b.w	8001f9c <__retarget_lock_acquire_recursive>
 8001e4e:	bf00      	nop
 8001e50:	200000e3 	.word	0x200000e3

08001e54 <__sinit_lock_release>:
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <__sinit_lock_release+0x8>)
 8001e56:	f000 b8a2 	b.w	8001f9e <__retarget_lock_release_recursive>
 8001e5a:	bf00      	nop
 8001e5c:	200000e3 	.word	0x200000e3

08001e60 <__sinit>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4604      	mov	r4, r0
 8001e64:	f7ff fff0 	bl	8001e48 <__sinit_lock_acquire>
 8001e68:	69a3      	ldr	r3, [r4, #24]
 8001e6a:	b11b      	cbz	r3, 8001e74 <__sinit+0x14>
 8001e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e70:	f7ff bff0 	b.w	8001e54 <__sinit_lock_release>
 8001e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e78:	6523      	str	r3, [r4, #80]	; 0x50
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <__sinit+0x68>)
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <__sinit+0x6c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e82:	42a3      	cmp	r3, r4
 8001e84:	bf04      	itt	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	61a3      	streq	r3, [r4, #24]
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f000 f820 	bl	8001ed0 <__sfp>
 8001e90:	6060      	str	r0, [r4, #4]
 8001e92:	4620      	mov	r0, r4
 8001e94:	f000 f81c 	bl	8001ed0 <__sfp>
 8001e98:	60a0      	str	r0, [r4, #8]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 f818 	bl	8001ed0 <__sfp>
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60e0      	str	r0, [r4, #12]
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	6860      	ldr	r0, [r4, #4]
 8001ea8:	f7ff ff82 	bl	8001db0 <std>
 8001eac:	68a0      	ldr	r0, [r4, #8]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2109      	movs	r1, #9
 8001eb2:	f7ff ff7d 	bl	8001db0 <std>
 8001eb6:	68e0      	ldr	r0, [r4, #12]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	2112      	movs	r1, #18
 8001ebc:	f7ff ff78 	bl	8001db0 <std>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61a3      	str	r3, [r4, #24]
 8001ec4:	e7d2      	b.n	8001e6c <__sinit+0xc>
 8001ec6:	bf00      	nop
 8001ec8:	080023e8 	.word	0x080023e8
 8001ecc:	08001df9 	.word	0x08001df9

08001ed0 <__sfp>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	4607      	mov	r7, r0
 8001ed4:	f7ff ffac 	bl	8001e30 <__sfp_lock_acquire>
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <__sfp+0x84>)
 8001eda:	681e      	ldr	r6, [r3, #0]
 8001edc:	69b3      	ldr	r3, [r6, #24]
 8001ede:	b913      	cbnz	r3, 8001ee6 <__sfp+0x16>
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7ff ffbd 	bl	8001e60 <__sinit>
 8001ee6:	3648      	adds	r6, #72	; 0x48
 8001ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	d503      	bpl.n	8001ef8 <__sfp+0x28>
 8001ef0:	6833      	ldr	r3, [r6, #0]
 8001ef2:	b30b      	cbz	r3, 8001f38 <__sfp+0x68>
 8001ef4:	6836      	ldr	r6, [r6, #0]
 8001ef6:	e7f7      	b.n	8001ee8 <__sfp+0x18>
 8001ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001efc:	b9d5      	cbnz	r5, 8001f34 <__sfp+0x64>
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <__sfp+0x88>)
 8001f00:	60e3      	str	r3, [r4, #12]
 8001f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f06:	6665      	str	r5, [r4, #100]	; 0x64
 8001f08:	f000 f847 	bl	8001f9a <__retarget_lock_init_recursive>
 8001f0c:	f7ff ff96 	bl	8001e3c <__sfp_lock_release>
 8001f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f18:	6025      	str	r5, [r4, #0]
 8001f1a:	61a5      	str	r5, [r4, #24]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f24:	f7ff fd44 	bl	80019b0 <memset>
 8001f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f30:	4620      	mov	r0, r4
 8001f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f34:	3468      	adds	r4, #104	; 0x68
 8001f36:	e7d9      	b.n	8001eec <__sfp+0x1c>
 8001f38:	2104      	movs	r1, #4
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	f7ff ff62 	bl	8001e04 <__sfmoreglue>
 8001f40:	4604      	mov	r4, r0
 8001f42:	6030      	str	r0, [r6, #0]
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d1d5      	bne.n	8001ef4 <__sfp+0x24>
 8001f48:	f7ff ff78 	bl	8001e3c <__sfp_lock_release>
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	e7ee      	b.n	8001f30 <__sfp+0x60>
 8001f52:	bf00      	nop
 8001f54:	080023e8 	.word	0x080023e8
 8001f58:	ffff0001 	.word	0xffff0001

08001f5c <_fwalk_reent>:
 8001f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f60:	4606      	mov	r6, r0
 8001f62:	4688      	mov	r8, r1
 8001f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f68:	2700      	movs	r7, #0
 8001f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8001f72:	d505      	bpl.n	8001f80 <_fwalk_reent+0x24>
 8001f74:	6824      	ldr	r4, [r4, #0]
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d1f7      	bne.n	8001f6a <_fwalk_reent+0xe>
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f80:	89ab      	ldrh	r3, [r5, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d907      	bls.n	8001f96 <_fwalk_reent+0x3a>
 8001f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	d003      	beq.n	8001f96 <_fwalk_reent+0x3a>
 8001f8e:	4629      	mov	r1, r5
 8001f90:	4630      	mov	r0, r6
 8001f92:	47c0      	blx	r8
 8001f94:	4307      	orrs	r7, r0
 8001f96:	3568      	adds	r5, #104	; 0x68
 8001f98:	e7e9      	b.n	8001f6e <_fwalk_reent+0x12>

08001f9a <__retarget_lock_init_recursive>:
 8001f9a:	4770      	bx	lr

08001f9c <__retarget_lock_acquire_recursive>:
 8001f9c:	4770      	bx	lr

08001f9e <__retarget_lock_release_recursive>:
 8001f9e:	4770      	bx	lr

08001fa0 <__swhatbuf_r>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	460e      	mov	r6, r1
 8001fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa8:	2900      	cmp	r1, #0
 8001faa:	b096      	sub	sp, #88	; 0x58
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	da07      	bge.n	8001fc2 <__swhatbuf_r+0x22>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	89b3      	ldrh	r3, [r6, #12]
 8001fb8:	061a      	lsls	r2, r3, #24
 8001fba:	d410      	bmi.n	8001fde <__swhatbuf_r+0x3e>
 8001fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc0:	e00e      	b.n	8001fe0 <__swhatbuf_r+0x40>
 8001fc2:	466a      	mov	r2, sp
 8001fc4:	f000 f96e 	bl	80022a4 <_fstat_r>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	dbf2      	blt.n	8001fb2 <__swhatbuf_r+0x12>
 8001fcc:	9a01      	ldr	r2, [sp, #4]
 8001fce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001fd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fd6:	425a      	negs	r2, r3
 8001fd8:	415a      	adcs	r2, r3
 8001fda:	602a      	str	r2, [r5, #0]
 8001fdc:	e7ee      	b.n	8001fbc <__swhatbuf_r+0x1c>
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	b016      	add	sp, #88	; 0x58
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}

08001fe8 <__smakebuf_r>:
 8001fe8:	898b      	ldrh	r3, [r1, #12]
 8001fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fec:	079d      	lsls	r5, r3, #30
 8001fee:	4606      	mov	r6, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	d507      	bpl.n	8002004 <__smakebuf_r+0x1c>
 8001ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ff8:	6023      	str	r3, [r4, #0]
 8001ffa:	6123      	str	r3, [r4, #16]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	6163      	str	r3, [r4, #20]
 8002000:	b002      	add	sp, #8
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	ab01      	add	r3, sp, #4
 8002006:	466a      	mov	r2, sp
 8002008:	f7ff ffca 	bl	8001fa0 <__swhatbuf_r>
 800200c:	9900      	ldr	r1, [sp, #0]
 800200e:	4605      	mov	r5, r0
 8002010:	4630      	mov	r0, r6
 8002012:	f000 f877 	bl	8002104 <_malloc_r>
 8002016:	b948      	cbnz	r0, 800202c <__smakebuf_r+0x44>
 8002018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800201c:	059a      	lsls	r2, r3, #22
 800201e:	d4ef      	bmi.n	8002000 <__smakebuf_r+0x18>
 8002020:	f023 0303 	bic.w	r3, r3, #3
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	81a3      	strh	r3, [r4, #12]
 800202a:	e7e3      	b.n	8001ff4 <__smakebuf_r+0xc>
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <__smakebuf_r+0x7c>)
 800202e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	6020      	str	r0, [r4, #0]
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	81a3      	strh	r3, [r4, #12]
 800203a:	9b00      	ldr	r3, [sp, #0]
 800203c:	6163      	str	r3, [r4, #20]
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	6120      	str	r0, [r4, #16]
 8002042:	b15b      	cbz	r3, 800205c <__smakebuf_r+0x74>
 8002044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002048:	4630      	mov	r0, r6
 800204a:	f000 f93d 	bl	80022c8 <_isatty_r>
 800204e:	b128      	cbz	r0, 800205c <__smakebuf_r+0x74>
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	81a3      	strh	r3, [r4, #12]
 800205c:	89a0      	ldrh	r0, [r4, #12]
 800205e:	4305      	orrs	r5, r0
 8002060:	81a5      	strh	r5, [r4, #12]
 8002062:	e7cd      	b.n	8002000 <__smakebuf_r+0x18>
 8002064:	08001df9 	.word	0x08001df9

08002068 <_free_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4605      	mov	r5, r0
 800206c:	2900      	cmp	r1, #0
 800206e:	d045      	beq.n	80020fc <_free_r+0x94>
 8002070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002074:	1f0c      	subs	r4, r1, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	bfb8      	it	lt
 800207a:	18e4      	addlt	r4, r4, r3
 800207c:	f000 f946 	bl	800230c <__malloc_lock>
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <_free_r+0x98>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	4610      	mov	r0, r2
 8002086:	b933      	cbnz	r3, 8002096 <_free_r+0x2e>
 8002088:	6063      	str	r3, [r4, #4]
 800208a:	6014      	str	r4, [r2, #0]
 800208c:	4628      	mov	r0, r5
 800208e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002092:	f000 b941 	b.w	8002318 <__malloc_unlock>
 8002096:	42a3      	cmp	r3, r4
 8002098:	d90b      	bls.n	80020b2 <_free_r+0x4a>
 800209a:	6821      	ldr	r1, [r4, #0]
 800209c:	1862      	adds	r2, r4, r1
 800209e:	4293      	cmp	r3, r2
 80020a0:	bf04      	itt	eq
 80020a2:	681a      	ldreq	r2, [r3, #0]
 80020a4:	685b      	ldreq	r3, [r3, #4]
 80020a6:	6063      	str	r3, [r4, #4]
 80020a8:	bf04      	itt	eq
 80020aa:	1852      	addeq	r2, r2, r1
 80020ac:	6022      	streq	r2, [r4, #0]
 80020ae:	6004      	str	r4, [r0, #0]
 80020b0:	e7ec      	b.n	800208c <_free_r+0x24>
 80020b2:	461a      	mov	r2, r3
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	b10b      	cbz	r3, 80020bc <_free_r+0x54>
 80020b8:	42a3      	cmp	r3, r4
 80020ba:	d9fa      	bls.n	80020b2 <_free_r+0x4a>
 80020bc:	6811      	ldr	r1, [r2, #0]
 80020be:	1850      	adds	r0, r2, r1
 80020c0:	42a0      	cmp	r0, r4
 80020c2:	d10b      	bne.n	80020dc <_free_r+0x74>
 80020c4:	6820      	ldr	r0, [r4, #0]
 80020c6:	4401      	add	r1, r0
 80020c8:	1850      	adds	r0, r2, r1
 80020ca:	4283      	cmp	r3, r0
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	d1dd      	bne.n	800208c <_free_r+0x24>
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	6053      	str	r3, [r2, #4]
 80020d6:	4401      	add	r1, r0
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	e7d7      	b.n	800208c <_free_r+0x24>
 80020dc:	d902      	bls.n	80020e4 <_free_r+0x7c>
 80020de:	230c      	movs	r3, #12
 80020e0:	602b      	str	r3, [r5, #0]
 80020e2:	e7d3      	b.n	800208c <_free_r+0x24>
 80020e4:	6820      	ldr	r0, [r4, #0]
 80020e6:	1821      	adds	r1, r4, r0
 80020e8:	428b      	cmp	r3, r1
 80020ea:	bf04      	itt	eq
 80020ec:	6819      	ldreq	r1, [r3, #0]
 80020ee:	685b      	ldreq	r3, [r3, #4]
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	bf04      	itt	eq
 80020f4:	1809      	addeq	r1, r1, r0
 80020f6:	6021      	streq	r1, [r4, #0]
 80020f8:	6054      	str	r4, [r2, #4]
 80020fa:	e7c7      	b.n	800208c <_free_r+0x24>
 80020fc:	bd38      	pop	{r3, r4, r5, pc}
 80020fe:	bf00      	nop
 8002100:	200000b0 	.word	0x200000b0

08002104 <_malloc_r>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	1ccd      	adds	r5, r1, #3
 8002108:	f025 0503 	bic.w	r5, r5, #3
 800210c:	3508      	adds	r5, #8
 800210e:	2d0c      	cmp	r5, #12
 8002110:	bf38      	it	cc
 8002112:	250c      	movcc	r5, #12
 8002114:	2d00      	cmp	r5, #0
 8002116:	4606      	mov	r6, r0
 8002118:	db01      	blt.n	800211e <_malloc_r+0x1a>
 800211a:	42a9      	cmp	r1, r5
 800211c:	d903      	bls.n	8002126 <_malloc_r+0x22>
 800211e:	230c      	movs	r3, #12
 8002120:	6033      	str	r3, [r6, #0]
 8002122:	2000      	movs	r0, #0
 8002124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002126:	f000 f8f1 	bl	800230c <__malloc_lock>
 800212a:	4921      	ldr	r1, [pc, #132]	; (80021b0 <_malloc_r+0xac>)
 800212c:	680a      	ldr	r2, [r1, #0]
 800212e:	4614      	mov	r4, r2
 8002130:	b99c      	cbnz	r4, 800215a <_malloc_r+0x56>
 8002132:	4f20      	ldr	r7, [pc, #128]	; (80021b4 <_malloc_r+0xb0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b923      	cbnz	r3, 8002142 <_malloc_r+0x3e>
 8002138:	4621      	mov	r1, r4
 800213a:	4630      	mov	r0, r6
 800213c:	f000 f83c 	bl	80021b8 <_sbrk_r>
 8002140:	6038      	str	r0, [r7, #0]
 8002142:	4629      	mov	r1, r5
 8002144:	4630      	mov	r0, r6
 8002146:	f000 f837 	bl	80021b8 <_sbrk_r>
 800214a:	1c43      	adds	r3, r0, #1
 800214c:	d123      	bne.n	8002196 <_malloc_r+0x92>
 800214e:	230c      	movs	r3, #12
 8002150:	6033      	str	r3, [r6, #0]
 8002152:	4630      	mov	r0, r6
 8002154:	f000 f8e0 	bl	8002318 <__malloc_unlock>
 8002158:	e7e3      	b.n	8002122 <_malloc_r+0x1e>
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	1b5b      	subs	r3, r3, r5
 800215e:	d417      	bmi.n	8002190 <_malloc_r+0x8c>
 8002160:	2b0b      	cmp	r3, #11
 8002162:	d903      	bls.n	800216c <_malloc_r+0x68>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	441c      	add	r4, r3
 8002168:	6025      	str	r5, [r4, #0]
 800216a:	e004      	b.n	8002176 <_malloc_r+0x72>
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	42a2      	cmp	r2, r4
 8002170:	bf0c      	ite	eq
 8002172:	600b      	streq	r3, [r1, #0]
 8002174:	6053      	strne	r3, [r2, #4]
 8002176:	4630      	mov	r0, r6
 8002178:	f000 f8ce 	bl	8002318 <__malloc_unlock>
 800217c:	f104 000b 	add.w	r0, r4, #11
 8002180:	1d23      	adds	r3, r4, #4
 8002182:	f020 0007 	bic.w	r0, r0, #7
 8002186:	1ac2      	subs	r2, r0, r3
 8002188:	d0cc      	beq.n	8002124 <_malloc_r+0x20>
 800218a:	1a1b      	subs	r3, r3, r0
 800218c:	50a3      	str	r3, [r4, r2]
 800218e:	e7c9      	b.n	8002124 <_malloc_r+0x20>
 8002190:	4622      	mov	r2, r4
 8002192:	6864      	ldr	r4, [r4, #4]
 8002194:	e7cc      	b.n	8002130 <_malloc_r+0x2c>
 8002196:	1cc4      	adds	r4, r0, #3
 8002198:	f024 0403 	bic.w	r4, r4, #3
 800219c:	42a0      	cmp	r0, r4
 800219e:	d0e3      	beq.n	8002168 <_malloc_r+0x64>
 80021a0:	1a21      	subs	r1, r4, r0
 80021a2:	4630      	mov	r0, r6
 80021a4:	f000 f808 	bl	80021b8 <_sbrk_r>
 80021a8:	3001      	adds	r0, #1
 80021aa:	d1dd      	bne.n	8002168 <_malloc_r+0x64>
 80021ac:	e7cf      	b.n	800214e <_malloc_r+0x4a>
 80021ae:	bf00      	nop
 80021b0:	200000b0 	.word	0x200000b0
 80021b4:	200000b4 	.word	0x200000b4

080021b8 <_sbrk_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d06      	ldr	r5, [pc, #24]	; (80021d4 <_sbrk_r+0x1c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7fe fa4a 	bl	800065c <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_sbrk_r+0x1a>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_sbrk_r+0x1a>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	200000ec 	.word	0x200000ec

080021d8 <__sread>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	460c      	mov	r4, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	f000 f8a0 	bl	8002324 <_read_r>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	bfab      	itete	ge
 80021e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021ea:	89a3      	ldrhlt	r3, [r4, #12]
 80021ec:	181b      	addge	r3, r3, r0
 80021ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021f2:	bfac      	ite	ge
 80021f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021f6:	81a3      	strhlt	r3, [r4, #12]
 80021f8:	bd10      	pop	{r4, pc}

080021fa <__swrite>:
 80021fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fe:	461f      	mov	r7, r3
 8002200:	898b      	ldrh	r3, [r1, #12]
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	4605      	mov	r5, r0
 8002206:	460c      	mov	r4, r1
 8002208:	4616      	mov	r6, r2
 800220a:	d505      	bpl.n	8002218 <__swrite+0x1e>
 800220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002210:	2302      	movs	r3, #2
 8002212:	2200      	movs	r2, #0
 8002214:	f000 f868 	bl	80022e8 <_lseek_r>
 8002218:	89a3      	ldrh	r3, [r4, #12]
 800221a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800221e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002222:	81a3      	strh	r3, [r4, #12]
 8002224:	4632      	mov	r2, r6
 8002226:	463b      	mov	r3, r7
 8002228:	4628      	mov	r0, r5
 800222a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800222e:	f000 b817 	b.w	8002260 <_write_r>

08002232 <__sseek>:
 8002232:	b510      	push	{r4, lr}
 8002234:	460c      	mov	r4, r1
 8002236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800223a:	f000 f855 	bl	80022e8 <_lseek_r>
 800223e:	1c43      	adds	r3, r0, #1
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	bf15      	itete	ne
 8002244:	6560      	strne	r0, [r4, #84]	; 0x54
 8002246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800224a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800224e:	81a3      	strheq	r3, [r4, #12]
 8002250:	bf18      	it	ne
 8002252:	81a3      	strhne	r3, [r4, #12]
 8002254:	bd10      	pop	{r4, pc}

08002256 <__sclose>:
 8002256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225a:	f000 b813 	b.w	8002284 <_close_r>
	...

08002260 <_write_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4d07      	ldr	r5, [pc, #28]	; (8002280 <_write_r+0x20>)
 8002264:	4604      	mov	r4, r0
 8002266:	4608      	mov	r0, r1
 8002268:	4611      	mov	r1, r2
 800226a:	2200      	movs	r2, #0
 800226c:	602a      	str	r2, [r5, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	f7fe f9a7 	bl	80005c2 <_write>
 8002274:	1c43      	adds	r3, r0, #1
 8002276:	d102      	bne.n	800227e <_write_r+0x1e>
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	b103      	cbz	r3, 800227e <_write_r+0x1e>
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	200000ec 	.word	0x200000ec

08002284 <_close_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d06      	ldr	r5, [pc, #24]	; (80022a0 <_close_r+0x1c>)
 8002288:	2300      	movs	r3, #0
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	f7fe f9b3 	bl	80005fa <_close>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_close_r+0x1a>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_close_r+0x1a>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	200000ec 	.word	0x200000ec

080022a4 <_fstat_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d07      	ldr	r5, [pc, #28]	; (80022c4 <_fstat_r+0x20>)
 80022a8:	2300      	movs	r3, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	f7fe f9ad 	bl	8000610 <_fstat>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d102      	bne.n	80022c0 <_fstat_r+0x1c>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	b103      	cbz	r3, 80022c0 <_fstat_r+0x1c>
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	200000ec 	.word	0x200000ec

080022c8 <_isatty_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4d06      	ldr	r5, [pc, #24]	; (80022e4 <_isatty_r+0x1c>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	602b      	str	r3, [r5, #0]
 80022d4:	f7fe f9ab 	bl	800062e <_isatty>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_isatty_r+0x1a>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_isatty_r+0x1a>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	200000ec 	.word	0x200000ec

080022e8 <_lseek_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4d07      	ldr	r5, [pc, #28]	; (8002308 <_lseek_r+0x20>)
 80022ec:	4604      	mov	r4, r0
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	2200      	movs	r2, #0
 80022f4:	602a      	str	r2, [r5, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe f9a3 	bl	8000642 <_lseek>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_lseek_r+0x1e>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	b103      	cbz	r3, 8002306 <_lseek_r+0x1e>
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	200000ec 	.word	0x200000ec

0800230c <__malloc_lock>:
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <__malloc_lock+0x8>)
 800230e:	f7ff be45 	b.w	8001f9c <__retarget_lock_acquire_recursive>
 8002312:	bf00      	nop
 8002314:	200000e4 	.word	0x200000e4

08002318 <__malloc_unlock>:
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <__malloc_unlock+0x8>)
 800231a:	f7ff be40 	b.w	8001f9e <__retarget_lock_release_recursive>
 800231e:	bf00      	nop
 8002320:	200000e4 	.word	0x200000e4

08002324 <_read_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	; (8002344 <_read_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe f928 	bl	8000588 <_read>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_read_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_read_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	200000ec 	.word	0x200000ec

08002348 <_init>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	bf00      	nop
 800234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234e:	bc08      	pop	{r3}
 8002350:	469e      	mov	lr, r3
 8002352:	4770      	bx	lr

08002354 <_fini>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr
